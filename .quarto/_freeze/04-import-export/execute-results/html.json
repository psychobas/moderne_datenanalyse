{
  "hash": "e67068050be411b5d690c1788a502c58",
  "result": {
    "markdown": "# Daten Import und Export in R\n\nIn diesem Kapitel beschäftigen wir uns mit grundlegenden Techniken, um Daten in R zu importieren und zu exportieren. Diese Fähigkeiten sind essentiell, da Datenanalyse ohne Daten nicht möglich ist. Die im Folgenden vorgestellten Methoden werden sehen, wie man effizient mit verschiedenen Datenquellen arbeiten kann. \n\n## Daten importieren\n\nZum Importieren von Daten in R gibt es verschiedene Methoden, die je nach Quelle und Dateityp variieren können. Wir werden drei häufige Ansätze betrachten:\n\n### Import durch Klicken\nIn RStudio können Sie Daten einfach durch Klicken importieren, via `Datei -> Import Dataset -> From Text (readr)`. Dies ist besonders nützlich für Anfänger oder wenn Sie schnell eine Datei ohne vorherige Skripterstellung laden möchten.\n\n**Beachten Sie:**\n- Durch diese Methode wird der entsprechende Code in der Konsole angezeigt. Dies ist hilfreich, um den genutzten Befehl zu lernen und bei Bedarf anzupassen.\n\n### Import durch Pfadangabe\nDie oben genannt Methode hat einen erheblichen Nachteil: sie ist durch andere nicht reporduzierbar. Wie schon gesagt ist ein grosser Vorteil von R, dass die Analysen durch das Ausführen gesamter Skripte reproduzierbar sind. Erfordert ein Skript menschlichen Input (Auswahl der Datei via Menü) ist es nicht mehr 100% reproduzierbar. Deshalb verwenden wir diese Mehtode nur zu Beginn. Besser ist es, die Daten via Pfadangabe einzulesen. Anstatt die Datei manuell auszuwählen, spezifizieren wir dabei den Pfad der Datei (also der Ort auf dem Computer, wo sich die Datei befindet).\n\nUnd nun zahlt es sich aus, dass wir im ersten Kapitel ein Projekt und eine Ordnerstruktur erstellt haben. Dies vereinfacht nämlich die Arbeit mit externen Daten und deren Pfaden enorm. Der Grund dafür ist, dass R nun bei der Angabe von Pfaden bereits im Projektordner \"sucht\". Dies können wir verifizieren, indem wir uns das Arbeitsverzeichnis (working directory) von R anzeigen lassen: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/dominik/Dropbox/Uni/Psychologie/PhD/Teaching/Data Analysis Introduction/data_analysis_quarto\"\n```\n:::\n:::\n\n\nDas heisst, dass wir nicht den ganzen Pfad zu einer Datei, also zum Beispiel `\"/Users/dominik/Dropbox/Uni/Psychologie/PhD/Teaching/Data Analysis Introduction/book/data/test_data.csv\"` angeben müssen, sondern nur den letzten Teil, `data/test_data.csv`.\n\nWenn sich die Datei `test_data.csv` also innerhlab ihres Projektordners in einem Ordner Namens `data` befinden würde, könnten sie die Datei folgendermassen einlesen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndf_0 <- read_csv('data/test_data.csv')\n```\n:::\n\n\n\nDaten werden häufig im sogenannten `csv` Format abgespeichert, dies steht für \"comma-separated values\". CSV Dateien sind Textdateien, bei denen Spalten durch Kommas getrennt werden. \n\n\n\n### Import über URL\nDer Import über eine URL ist effizient, wenn Daten regelmäßig aktualisiert werden oder sehr groß sind. Beispiel:\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Daten prüfen\nNach dem Import ist es wichtig, die Daten zu prüfen, um ein Verständnis für die Struktur und mögliche Probleme zu entwickeln:\n- `glimpse(df)` zeigt die Struktur der Daten, wir sehen alle Spalten und die Klasse der Variablen (in diesem Fall alles `double`)\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32\nColumns: 11\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n```\n:::\n:::\n\n\n- `head(df)` zeigt die ersten Zeilen.\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|                  |  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:-----------------|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4         | 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag     | 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Datsun 710        | 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n|Hornet 4 Drive    | 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n|Hornet Sportabout | 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n|Valiant           | 18.1|   6|  225| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|\n\n</div>\n:::\n:::\n\n\n- `summary(df)` liefert eine Zusammenfassung der Daten.\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n```\n:::\n:::\n\n\n\n## Daten exportieren\nNach einer Analyse möchten wir Daten oft exporiteren. Dies erfolgt ähnlich wie das Importieren. \n\n\n### Export als CSV\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(df, 'pfad/zum/speichern/my_data.csv')\n```\n:::\n\n\n### Export als XLSX\nNach Installation von `writexl`:\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"writexl\")\nlibrary(writexl)\nwrite_xlsx(df, 'pfad/zum/speichern/my_data.xlsx')\n```\n:::\n\n\n### Export als RData\nFür R-spezifische Datenformate:\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(df, file = 'pfad/zum/speichern/my_data.RData')\n```\n:::\n\n\n\n## Aufgaben\n1. Besuchen Sie die Webseite [Gabor's Data Analysis](https://gabors-data-analysis.com/) und finden Sie die OSF-Datenbank.\n2. Laden Sie die `hotelbookingdata.csv` von der OSF-Datenbank manuell herunter und importieren Sie sie in R.\n3. Exportieren Sie die Daten als XLSX und RData.\n\nDurch das Erlernen dieser Techniken wird Ihr Arbeitsfluss in R effizienter und Ihre Analysen reproduzierbar, was die Grundlage für empirische Forschung bildet.\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}