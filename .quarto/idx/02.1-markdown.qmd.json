{"title":"Berichte mit R Markdown erstellen","markdown":{"headingText":"Berichte mit R Markdown erstellen","headingAttr":{"id":"sec-reports","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n## Lernziele {#sec-ilo-reports .unnumbered}\n\n- Ein Projekt strukturieren können\n- Einen einfachen reproduzierbaren Bericht mit R Markdown erstellen können\n- Codeblöcke, Tabellen, Bilder und inline R code in einem R Markdown-Dokument erstellen können\n\n## Verwendete Funktionen {#functions-reports}\n\n```{r, include = FALSE}\n# Lade die tidyverse-Pakete einzeln, damit Auto-Links in der `func()` Notation funktionieren\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(tinytex)\n```\n\n* Eingebaute Funktionen (diese können immer ohne das Laden von Paketen verwendet werden)\n    * base:: `max()`, `min()`, `nrow()`, `str()`, `summary()`\n    * utils:: `View()`\n* tidyverse (alle diese können mit `library(tidyverse)` verwendet werden)\n    * readr:: `read_csv()`, `row_spec()`\n    * dplyr:: `count()`, `filter()`\n    * ggplot2:: `geom_bar()`, `geom_col()`, `ggplot()`, `labs()`\n* Andere (Sie müssen jedes Paket laden, um diese zu verwenden)\n    * knitr:: `include_graphics()`, `kable()`\n    * kableExtra:: `kable_classic()`, `row_spec()`\n    * tinytex:: `install_tinytex()`\n\nLade den [R Markdown Spickzettel](https://www.rstudio.org/links/r_markdown_cheat_sheet){download=\"\"} herunter.\n\n## Einrichtung {#sec-setup-reports}\n\nHier sind die Pakete, die wir in diesem Kapitel verwenden werden. Sie müssen sie möglicherweise installieren, wie in @sec-install-package erklärt, wenn das Ausführen des untenstehenden Codes im Konsolenbereich den Fehler `Error in library(package_name) : there is no package called ‘packagename’` erzeugt.\n\n```{r setup-reports, message=FALSE, filename=\"Chapter packages\"}\nlibrary(tidyverse)  # verschiedene Datenmanipulationsfunktionen\nlibrary(knitr)      # für das Rendern eines Berichts aus einem Skript\nlibrary(rmarkdown)  # für die Verwendung von R Markdown\nlibrary(kableExtra) # für das Stylen von Tabellen\n```\n\n## Ein Projekt organisieren {#sec-projects}\n\nBevor wir irgendeinen Code schreiben, müssen wir uns zuerst organisieren. `r glossary(\"project\", \"Projects\")` in RStudio sind eine Möglichkeit, alle Dateien, die Sie für ein Projekt benötigen, zu gruppieren. Die meisten Projekte beinhalten `r glossary(\"script\", \"scripts\")`, Datendateien und Ausgabedateien wie den von dem Skript erstellten PDF-Bericht oder Bilder.\n\n### Standardarbeitsverzeichnis\n\nZuerst erstellen Sie ein neues `r glossary(\"directory\")` (d. h. einen Ordner) auf Ihrem Computer, in dem Sie alle Ihre R-Projekte aufbewahren. Nennen Sie es etwas wie \"R-Projekte\" (vermeiden Sie Leerzeichen und andere Sonderzeichen). Stellen Sie sicher, dass Sie wissen, wie Sie dieses Verzeichnis mit dem Finder oder Explorer Ihres Computers erreichen können.\n\n::: {.callout-caution}\n## Vermeiden Sie Netzwerklaufwerke\n\nWenn möglich, verwenden Sie kein Netzwerk- oder Cloud-Laufwerk (z. B. OneDrive oder Dropbox), da dies manchmal Probleme verursachen kann. Wenn Sie von einem Netzwerklaufwerk aus arbeiten und Probleme haben, ist ein hilfreicher Test, Ihren Projektordner auf den Desktop zu verschieben, um zu sehen, ob das das Problem löst.\n:::\n\nAls nächstes öffnen Sie <if>Tools > Global Options...</if>, navigieren Sie zum <if>General</if> Bereich und setzen Sie das \"Standardarbeitsverzeichnis (wenn nicht in einem Projekt)\" auf dieses Verzeichnis. Wenn Sie nicht in einem Projekt arbeiten, werden alle Dateien oder Bilder, die Sie erstellen, in diesem `r glossary(\"working directory\")` gespeichert.\n\n::: {.callout-caution}\n## Vermeiden Sie lange Pfadnamen\n\nIn einigen Versionen von Windows 10 und 11 können lange Pfadnamen, die länger als 260 Zeichen sind, Probleme verursachen. Setzen Sie Ihr Standardarbeitsverzeichnis auf einen Pfad, dessen Länge deutlich darunter liegt, um Probleme zu vermeiden, wenn R temporäre Dateien beim Rendern eines Berichts erstellt. Wenn Sie Probleme haben, ist ein hilfreicher Test, Ihren Projektordner auf den Desktop zu verschieben, da dies wahrscheinlich einen viel kürzeren Pfadnamen hat als die meisten anderen Ordner auf Ihrem Computer.\n:::\n\nSie können das Arbeitsverzeichnis manuell auf einen anderen Ort setzen mit Menübefehlen: <if>Session > Set Working Directory > Choose Directory...</if> Allerdings gibt es eine bessere Art, Ihre Dateien zu organisieren, indem Sie Projekte in RStudio verwenden.\n\n### Ein Projekt starten {#sec-project-start}\n\nBeginnen Sie, indem Sie ein Verzeichnis in Ihrem Standardprojektverzeichnis erstellen, in dem Sie alle Ihre Unterlagen für diesen Kurs aufbewahren; wir schlagen vor, es etwas wie `ADS-23` zu nennen.\n\nUm ein neues Projekt für die Arbeit in diesem Kapitel zu erstellen:\n\n-   <if>File > New Project...</if>\n-   Benennen Sie das Projekt `r path(\"02-reports\")`\n-   Speichern Sie es im `ADS-23` Verzeichnis\n\nRStudio wird sich selbst neu starten und mit diesem neuen Projektverzeichnis als Arbeitsverzeichnis öffnen.\n\n::: {#fig-new-proj layout-ncol=3}\n\n![](images/reports/new_proj_1.png)\n\n![](images/reports/new_proj_2.png)\n\n![](images/reports/new_proj_3.png)\n\nEin neues Projekt starten.\n:::\n\nKlicken Sie auf die Registerkarte Dateien im unteren rechten Bereich, um den Inhalt des Projektverzeichnisses zu sehen. Sie werden eine Datei mit dem Namen `02-reports.Rproj` sehen, die eine Datei enthält, die alle Projektinformationen enthält. Wenn Sie im Finder/Explorer sind, können Sie darauf doppelklicken, um das Projekt zu öffnen.\n\n::: {.callout-note}\n## Punktdateien\n\nAbhängig von Ihren Einstellungen sehen Sie möglicherweise auch ein Verzeichnis namens `.Rproj.user`, das Ihre spezifischen Benutzereinstellungen enthält. Sie können dies und andere \"unsichtbare\" Dateien, die mit einem Punkt beginnen, ignorieren.\n:::\n\n::: {.callout-caution}\n## Vermeiden Sie verschachtelte Projekte\n\nSpeichern Sie niemals ein neues Projekt **innerhalb** eines anderen Projektverzeichnisses. Dies kann einige schwer zu lösende Probleme verursachen.\n:::\n\n### Dinge benennen {#sec-naming}\n\nBevor wir neue Dateien erstellen, ist es wichtig, zu überprüfen, wie Sie Ihre Dateien benennen. Das mag etwas pedantisch erscheinen, aber klare Benennungsregeln zu befolgen, damit sowohl Menschen als auch Computer leicht Dinge finden können, wird Ihnen auf lange Sicht das Leben erleichtern. Hier sind einige wichtige Prinzipien:\n\n- Datei- und Verzeichnisnamen sollten nur Buchstaben, Zahlen, Bindestriche und Unterstriche enthalten, mit einem Punkt (`.`) zwischen dem Dateinamen und `r glossary(\"extension\")` (das bedeutet keine Leerzeichen!)\n- Konsistente Groß-/Kleinschreibung (setzen Sie eine Regel fest, um es sich leicht zu merken, wie immer Kleinbuchstaben verwenden)\n- Verwenden Sie Unterstriche (`_`) zur Trennung von Teilen des Dateinamens, wie Titel und Datum, und Bindestriche (`-`) zur Trennung von Wörtern in jedem Teil (z. B. `social-media-report_2021-10.Rmd`)\n- Benennen Sie Dateien nach einem Muster, das in einer sinnvollen Reihenfolge alphabetisch sortiert wird und es Ihnen erleichtert, die Datei zu finden, die Sie suchen\n- Präfixieren Sie einen Dateinamen mit einem\n\n Unterstrich, um ihn an den Anfang der Liste zu setzen, oder präfixieren Sie alle Dateien mit Zahlen, um ihre Reihenfolge zu steuern\n\nZum Beispiel sind diese Dateinamen ein Durcheinander:\n\n-   `r path(\"report.doc\")`\n-   `r path(\"report final.doc\")`\n-   `r path(\"Data (Customers) 11-15.xls\")`\n-   `r path(\"Customers Data Nov 12.xls\")`\n-   `r path(\"final report2.doc\")`\n-   `r path(\"project notes.txt\")`\n-   `r path(\"Vendor Data November 15.xls\")`\n\nHier ist eine Möglichkeit, sie zu strukturieren, damit ähnliche Dateien dieselbe Struktur haben und es für einen Menschen einfach ist, die Liste zu scannen oder Code zu verwenden, um relevante Dateien zu finden. Sehen Sie, ob Sie herausfinden können, was das Letzte sein sollte.\n\n-   `r path(\"_project-notes.txt\")`\n-   `r path(\"report_v1.doc\")`\n-   `r path(\"report_v2.doc\")`\n-   `r path(\"report_v3.doc\")`\n-   `r path(\"data_customer_2021-11-12.xls\")`\n-   `r path(\"data_customer_2021-11-15.xls\")`\n-   `r mcq(c(\"vendor-data_2021-11-15.xls\", \"data-vendor-2021_11_15.xls\", answer = \"data_vendor_2021-11-15.xls\", \"data_2021-11-15_vendor.xls\"))`\n\n::: {.callout-note .try}\n## Benennungsübung\n\nDenken Sie über andere Möglichkeiten nach, die oben genannten Dateien zu benennen. Sehen Sie sich einige Ihrer eigenen Projektdateien an und überlegen Sie, was Sie verbessern können.\n:::\n\n## R Markdown {#sec-rmarkdown}\n\nWährend dieses Kurses verwenden wir `r glossary(\"R Markdown\")`, um reproduzierbare Berichte mit einem Inhaltsverzeichnis, Text, Tabellen, Bildern und Code zu erstellen. Der Text kann mit `r glossary(\"markdown\")` geschrieben werden, einer Methode zur Festlegung von Formatierungen wie Überschriften, Absätzen, Listen, Fettdruck und Links.\n\n### Neues Dokument\n\nUm ein neues R Markdown-Dokument zu öffnen, klicken Sie <if>File > New File > R Markdown</if>. Sie werden aufgefordert, ihm einen Titel zu geben; benennen Sie es `Wichtige Infos`. Sie können auch den Autorennamen ändern. Behalten Sie das Ausgabeformat als HTML bei.\n\nNachdem Sie ein neues Dokument geöffnet haben, speichern Sie es, indem Sie auf <if>File > Save As...</if> klicken. Sie sollten diese Datei `important_info` nennen (wenn Sie auf einem Mac sind und die Datei `r glossary(\"extension\")` sehen können, nennen Sie sie `important_info.Rmd`). Diese Datei wird automatisch in Ihrem Projektordner (d. h. Ihrem Arbeitsverzeichnis) gespeichert, sodass Sie diese Datei nun in Ihrem Dateibetrachter sehen sollten.\n\nWenn Sie ein neues R Markdown-Dokument zum ersten Mal öffnen, sehen Sie einen Haufen Begrüßungstext, der so aussieht:\n\n```{r fig-markdown-default, echo=FALSE, fig.cap=\"Neuer R Markdown-Text\"}\n\nknitr::include_graphics(\"images/reports/markdown-default.png\")\n\n```\n\nFühren Sie die folgenden Schritte aus:\n\n- Ändern Sie den Titel in \"Wichtige Informationen\" und den Autor in Ihren Namen\n- Löschen Sie **alles** nach dem Setup-Block\n- Lassen Sie eine Zeile nach dem Setup-Block frei und tippen Sie \"## Meine Infos\" (mit den Rauten, aber ohne die Anführungszeichen); stellen Sie sicher, dass keine Leerzeichen vor den Rauten sind und mindestens ein Leerzeichen nach den Rauten vor dem Untertitel\n- Lassen Sie eine Zeile frei und klicken Sie auf das Menü zum Einfügen eines neuen Codes (ein grünes Kästchen mit einem C und einem Pluszeichen) und wählen Sie <if>R</if>\n\nIhr Markdown-Dokument sollte jetzt etwa so aussehen:\n\n```{r fig-new-chunk, echo=FALSE, fig.cap=\"Neuer R-Block\"}\n\nknitr::include_graphics(\"images/reports/new-chunk.png\")\n\n```\n\n### Codeblöcke {#sec-code-chunks}\n\nWas Sie erstellt haben, ist ein Untertitel und ein **Codeblock**. In R Markdown wird alles, was in einem grauen Codeblock geschrieben steht, als Code angesehen, und alles, was im weißen Raum (zwischen den Codeblöcken) geschrieben wird, wird als normaler Text betrachtet (die tatsächlichen Farben hängen davon ab, welches Thema Sie angewendet haben, aber wir beziehen uns auf das Standardweiß und Grau). Dies erleichtert die Kombination von Text und Code in einem Dokument.\n\n::: {.callout-caution}\n## Fehler in Codeblöcken\n\nWenn Sie einen neuen Codeblock erstellen, sollten Sie beachten, dass der graue Kasten mit drei Rückwärts-Apostrophen `\\`\\`\\`` beginnt und endet. Ein häufiger Fehler ist es, diese Rückwärts-Apostrophen versehentlich zu löschen. Denken Sie daran, dass Codeblöcke und Texteingaben unterschiedliche Farben haben - wenn die Farbe bestimmter Teile Ihres Markdown nicht richtig aussieht, überprüfen Sie, ob Sie die Rückwärts-Apostrophen nicht gelöscht haben.\n:::\n\n\nIn Ihrem Codeblock schreiben Sie den Code, den Sie in @sec-objects erstellt haben.\n\n```{r, filename=\"important_info.Rmd\"}\nname <- \"Emily\"\nage <- 36\ntoday <- Sys.Date()\nchristmas <- as.Date(\"2024-12-25\")\n```\n\n::: {.callout-note}\n## Konsole vs. Skripte\n\nIn @sec-intro haben wir Sie gebeten, Code in die Konsole einzugeben. Jetzt möchten wir, dass Sie Code in Codeblöcke in R Markdown-Dateien eingeben, um den Code reproduzierbar zu machen. Auf diese Weise können Sie Ihren Code jederzeit neu ausführen, wenn sich die Daten ändern, um den Bericht zu aktualisieren, und Sie oder andere können den Code überprüfen, um Fehler zu identifizieren und zu beheben.\n\nEs gibt jedoch immer noch Zeiten, in denen Sie Code in die Konsole statt in ein Skript eingeben müssen, beispielsweise wenn Sie ein neues Paket installieren. In diesem Buch werden Codeblöcke mit gekennzeichnet, ob Sie sie in der Konsole ausführen oder den Code zu einem Skript hinzufügen sollten.\n:::\n\n### Code ausführen\n\nWenn Sie in einem R Markdown-Dokument arbeiten, gibt es mehrere Möglichkeiten, Ihre Codezeilen auszuführen.\n\nZuerst können Sie den Code, den Sie ausführen möchten, markieren und dann auf <if>Run > Run Selected Line(s)</if> klicken, dies ist jedoch mühsam und kann Probleme verursachen, wenn Sie nicht *genau* den Code markieren, den Sie ausführen möchten.\n\nAlternativ können Sie die grüne \"Play\"-Schaltfläche oben rechts im Codeblock drücken, und dies wird **alle** Codezeilen in diesem Block ausführen.\n\n```{r fig-run-all, echo=FALSE, fig.cap=\"Klicken Sie auf den grünen Pfeil, um allen Code im Block auszuführen.\"}\n\nknitr::include_graphics(\"images/reports/run-all.png\")\n\n```\n\n\nNoch besser ist es, einige der Tastenkürzel für R Studio zu lernen. Um eine einzelne Codezeile auszuführen, stellen Sie sicher, dass sich der Cursor in der Codezeile befindet, die Sie ausführen möchten (er kann sich irgendwo befinden), und drücken Sie <pc>Ctrl+Enter</pc> oder <mac>Cmd+Enter</mac>. Wenn Sie allen Code im Codeblock ausführen möchten, drücken Sie <pc>Ctrl+Shift+Enter</pc> oder <mac>Cmd+Shift+Enter</mac>. Lernen Sie diese Tastenkürzel; sie werden Ihr Leben einfacher machen!\n\n```{r fig-run3, echo=FALSE, fig.cap=\"Verwenden Sie das Tastenkürzel, um nur markierten Code auszuführen, oder führen Sie eine Zeile nach der anderen aus, indem Sie den Cursor auf einer Zeile platzieren, ohne etwas zu markieren.\"}\n\nknitr::include_graphics(\"images/reports/run3.gif\")\n\n```\n\nFühren Sie Ihren Code mit jeder der oben genannten Methoden aus. Sie sollten sehen, dass die Variablen `name`, `age`, `today` und `christmas` im Umgebungsbereich erscheinen. (Starten Sie R neu, um zurückzusetzen.)\n\n### Inline-Code {#sec-rmd-inline-r }\n\nWir spre\n\nchen immer wieder davon, R Markdown für reproduzierbare Berichte zu verwenden, aber es ist einfacher, Ihnen zu zeigen, warum dies so mächtig ist und Ihnen einen Einblick zu geben, wie dieser Kurs (hoffentlich!) die Art und Weise ändern wird, wie Sie mit Daten für immer arbeiten!\n\nEin wichtiges Merkmal von R Markdown ist, dass Sie Text und Code kombinieren können, um Werte in Ihre Texte einzufügen, indem Sie **Inline-Coding** verwenden. Wenn Sie jemals einen Wert oder Text von einer Datei in eine andere kopieren und einfügen mussten, wissen Sie, wie einfach es sein kann, Fehler zu machen. Inline-Code vermeidet dies. Wieder ist es einfacher, Ihnen zu zeigen, was Inline-Code macht, als es zu erklären, also lassen Sie es uns versuchen.\n\nKopieren und fügen Sie zuerst diesen Text in den **weißen Raum unterhalb** Ihres Codeblocks ein. Wenn Sie einen anderen Variablennamen als `christmas` verwendet haben, sollten Sie diesen mit dem Namen des Objekts aktualisieren, das Sie erstellt haben, aber ändern Sie sonst nichts.\n\n```{verbatim, lang=\"md\"}\nMein Name ist `r name` und ich bin `r age` Jahre alt. \nEs sind `r christmas - today` Tage bis Weihnachten, \nwas mein Lieblingsfeiertag ist.\n```\n\n:::{.callout-caution}\n## Diagramme anzeigen\n\nSie können kein Diagramm mit Inline-R anzeigen. Diagramme sollten aus Codeblöcken angezeigt werden. Wir kommen bald darauf zurück, wie man das macht.\n:::\n\n### Ihre Datei stricken {#sec-rmd-knit}\n\nJetzt werden wir `r glossary(\"knit\")`, oder die Datei in einen Dokumententyp unserer Wahl kompilieren. In diesem Fall erstellen wir eine Standard-HTML-Datei, aber Sie werden lernen, wie man andere Dateien wie Word und PDF im Verlauf dieses Kurses erstellt. Um Ihre Datei zu stricken, klicken Sie <if>Knit > Knit to HMTL</if>.\n\nR Markdown wird ein neues HTML-Dokument erstellen und anzeigen, aber es wird auch automatisch diese Datei in Ihrem Arbeitsverzeichnis speichern.\n\nWie durch Zauberei erscheint dieser etwas seltsame Text, den Sie kopiert und eingefügt haben, nun als normaler Satz mit den Werten, die aus den von Ihnen erstellten Objekten gezogen wurden.\n\n> Mein Name ist `r name` und ich bin `r age` Jahre alt. Es sind `r christmas - today` Tage bis Weihnachten, was mein Lieblingsfeiertag ist.\n\n::: {.callout-note collapse=\"true\"}\n## Stricken mit Code\n\nSie können auch stricken, indem Sie den folgenden Code in die Konsole eingeben. Geben Sie diesen niemals in ein Rmd-Skript selbst ein, da es versuchen würde, sich selbst in einer Endlosschleife zu stricken.\n\n```{r, eval = FALSE, filename=\"In der Konsole ausführen\"}\nrmarkdown::render(\"important_info.Rmd\")\n\n# alternativ können Sie dies verwenden, aber Sie erhalten möglicherweise eine Warnung\nknitr::knit2html(\"important_info.Rmd\")\n```\n:::\n\n## Daten laden\n\nLassen Sie uns nun ein weiteres Beispiel dafür versuchen, Markdown zu verwenden, aber diesmal anstatt Objekte zu verwenden, die wir von Grund auf neu erstellt haben, werden wir eine Datendatei einlesen.\n\nSpeichern und schließen Sie Ihr `important_info.Rmd` Dokument. Öffnen und speichern Sie dann ein neues Markdown-Dokument, diesmal mit dem Namen `sales_data.Rmd`. Sie können wieder alles nach dem Setup-Block löschen. Fügen Sie `library(tidyverse)` zum Setup-Block hinzu, damit die tidyverse-Funktionen für Ihr Skript verfügbar sind.\n\n```{r, verbatim=\"r setup, include=FALSE\"}\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(tidyverse)\n```\n\n\n### Online-Quellen {#sec-loading-online}\n\nLassen Sie uns zuerst versuchen, Daten zu laden, die online gespeichert sind. Erstellen Sie einen Codeblock in Ihrem Dokument und kopieren, fügen Sie den unten stehenden Code ein und führen Sie ihn aus. Dieser Code lädt einige simulierte Verkaufsdaten.\n\n- Die Daten sind in einer `.csv`-Datei gespeichert, daher verwenden wir die Funktion `read_csv()`, um sie zu laden.\n- Beachten Sie, dass die URL in doppelten Anführungszeichen steht - ohne diese funktioniert sie nicht.\n\n```{r, message=FALSE, filename=\"sales_data.Rmd\"}\nsales_online <- read_csv(\"https://psyteachr.github.io/ads-v2/data/sales_data_sample.csv\")\n```\n\n::: {.callout-warning}\n## Funktion nicht gefunden\n\nWenn Sie eine Fehlermeldung erhalten, die so aussieht:\n\n> Error in read_csv(\"https://psyteachr.github.io/ads-v2/data/sales_data_sample.csv\") :  \n>  could not find function \"read_csv\"\n\nDas bedeutet, dass Sie tidyverse nicht geladen haben. Überprüfen Sie, ob `library(tidyverse)` im Setup-Block steht und dass Sie den Setup-Block ausgeführt haben.\n:::\n\nDieser Datensatz ist simulierte Verkaufsdaten für verschiedene Fahrzeugtypen (ursprünglich von [Kaggle](https://www.kaggle.com/kyanyoga/sample-sales-data)), wobei jede Zeile der Daten eine einzelne Bestellung ist. Es gibt mehrere Möglichkeiten, einen Datensatz in R zu betrachten und zu überprüfen. Führen Sie jede der folgenden Aktionen durch und machen Sie sich Notizen darüber, welche Informationen jeder Ansatz zu geben scheint. Wenn Sie mehr Informationen zu jeder dieser Funktionen wünschen, können Sie die Hilfedokumentation mit `?function` aufrufen:\n\n- Klicken Sie auf das Objekt `sales_online` im Umgebungsbereich\n- Führen Sie `head(sales_online)` in der Konsole aus\n- Führen Sie `summary(sales_online)` in der Konsole aus\n- Führen Sie `str(sales_online)` in der Konsole aus\n- Führen Sie `View(sales_online)` in der Konsole aus\n\n### Lokale Datendateien\n\nHäufiger werden Sie jedoch mit Datendateien arbeiten, die lokal auf Ihrem Computer gespeichert sind. Aber wo sollten Sie all Ihre Dateien speichern? Normalerweise möchten Sie alle Ihre Skripte und Datendateien für ein einzelnes Projekt in einem Ordner auf Ihrem Computer haben, dem `r glossary(\"working directory\")` des Projekts, und wir haben bereits das Hauptverzeichnis `r path(\"02-reports\")` für dieses Kapitel eingerichtet.\n\nSie können Dateien in Unterordnern innerhalb dieses Hauptprojektverzeichnisses organisieren, wie das Speichern aller Rohdatendateien in einem Unterordner namens `r path(\"data\")` und das Speichern aller Bilddateien in einem Unterordner namens `r path(\"images\")`. Die Verwendung von Unterordnern hilft, zu verhindern, dass ein einzelner Ordner zu überfüllt wird, was wichtig ist, wenn Sie an großen Projekten arbeiten.\n\nErstellen Sie in Ihrem `r path(\"02-reports\")` Verzeichnis einen neuen Ordner namens `r path(\"data\")`, [laden Sie eine Kopie der Verkaufsdatendatei herunter](https://psyteachr.github.io/ads-v2/data/sales_data_sample.csv){download=\"\"}, und speichern Sie sie in diesem neuen Unterordner.\n\nUm Daten aus einer lokalen Datei zu laden, können wir wieder die Funktion `read_csv()` verwenden, aber diesmal geben wir anstelle einer URL den Unterordner und den Dateinamen an.\n\n```{r read-csv, eval = FALSE, filename=\"sales_data.Rmd\"}\nsales_local <- read_csv(\"data/sales_data_sample.csv\")\n```\n\n::: {.callout-tip}\n## Dateinamen mit Tab-Autovervollständigung\n\nVerwenden Sie die Tab-Autovervollständigung, wenn Sie Dateinamen in einem Codeblock eingeben. Nachdem Sie das erste Anführungszeichen eingegeben haben, drücken Sie Tab, um ein Dropdown-Menü der Dateien in Ihrem Arbeitsverzeichnis zu sehen. Sie können den Namen des Unterordners oder der Datei eingeben, um es einzugrenzen. Dies ist sehr nützlich, um ärgerliche Fehler aufgrund von Tippfehlern oder Dateien, die nicht dort sind, wo Sie sie erwarten, zu vermeiden.\n:::\n\nDinge zu beachten:\n\n- Sie müssen die Dateiendung (in diesem Fall `.csv`) einschließen\n- Der Unterordnername (`data`) und der Dateiname werden durch einen Schrägstrich `/` getrennt\n- Genauigkeit ist wichtig, wenn Sie einen Tippfehler im Dateinamen haben, wird Ihre Datei nicht gefunden; denken Sie daran, dass R groß- und kleinsch\n\nreibungsabhängig ist - `Sales_Data.csv` ist eine völlig andere Datei als `sales_data.csv`, soweit es R betrifft.\n\n::: {.callout-note .try}\n## sales_local anzeigen\n\nFühren Sie `head()`, `summary()`, `str()` und `View()` auf `sales_local` aus, um zu bestätigen, dass die Daten mit `sales_online` übereinstimmen.\n:::\n\n## Einen Bericht schreiben\n\nWir werden einen grundlegenden Bericht für diesen Verkaufsdatensatz mit R Markdown schreiben, um Ihnen einige der Funktionen zu zeigen. Wir werden fast jeden Aspekt dessen, was wir Ihnen gerade zeigen, im Verlauf dieses Kurses erweitern; das wichtigste Ergebnis ist, dass Sie anfangen, sich mit der Funktionsweise von R Markdown vertraut zu machen und zu verstehen, wozu Sie es verwenden können.\n\n### Datenanalyse\n\nFür diesen Bericht werden wir nur einige einfache Verkaufsstatistiken für drei Fahrzeugtypen vorstellen: Flugzeuge, Motorräder und klassische Autos. Wir werden darauf zurückkommen, wie Sie diesen Code selbst schreiben können, in @sec-summary. Für jetzt sehen Sie, ob Sie der Logik des Codes folgen können, den wir Ihnen durch die Codekommentare erklären.\n\nErstellen Sie einen neuen Codeblock, kopieren, fügen Sie den folgenden Code ein und führen Sie ihn aus, und sehen Sie sich dann `sales_counts` an, indem Sie auf das Objekt im Umgebungsbereich klicken. Beachten Sie, dass es nicht wirklich wichtig ist, ob Sie `sales_local` oder `sales_online` in der ersten Zeile verwenden, da sie identisch sind.\n\n```{r sales_counts, filename=\"sales_data.Rmd\"}\n# behalte nur die Daten von Flugzeugen, Motorrädern und Autos\nsales_pmc <- filter(sales_online,\n         PRODUCTLINE %in% c(\"Planes\", \"Motorcycles\", \"Classic Cars\"))\n\n# zähle, wie viele es in jeder PRODUCTLINE gibt\nsales_counts <-count(sales_pmc, PRODUCTLINE)\n```\n\nDa jede Zeile des Datensatzes einen Verkauf darstellt, gibt uns dieser Code eine schöne und einfache Möglichkeit zu sehen, wie viele Verkäufe von jedem Fahrzeugtyp gemacht wurden; er zählt einfach die Anzahl der Zeilen in jeder Gruppe.\n\n```{r sales_counts_show, echo = FALSE}\nsales_counts\n```\n\n::: {.callout-note}\nEinfach ein Objekt für sich auf einer Zeile \"ausdrucken\". @sec-rmd-tables zeigt Ihnen, wie Sie die Tabelle in verschiedenen Formaten für Ihren Bericht ausdrucken.\n:::\n\n### Textformatierung {#sec-markdown}\n\nSie können den visuellen `r glossary(\"markdown\")`-Editor verwenden, wenn Sie RStudio Version 1.4 oder höher haben. Dies wird ein Knopf oben in der Quellfenster sein, und die Menüoptionen sollten jedem vertraut sein, der mit Software wie Microsoft Word gearbeitet hat.\n\n```{r fig-visual-editor, echo = FALSE, fig.cap=\"Der visuelle Editor.\"}\ninclude_graphics(\"images/reports/visual-editor.png\")\n```\n\nDies ist nützlich für komplexe Stile, aber Sie können auch diese häufigen Klartext-Stil-Markups verwenden:\n\n- Überschriften werden erstellt, indem Sie Untertitel mit einer oder mehreren Rauten (`#`) und einem Leerzeichen präfixieren (lassen Sie das Leerzeichen nicht aus). Wenn Sie ein Inhaltsverzeichnis einschließen, wird dies aus Ihren Dokumentüberschriften erstellt.\n- Formatieren Sie Text mit *Kursivschrift* oder **Fettdruck**, indem Sie den Text mit ein oder zwei Sternchen oder Unterstrichen umgeben.\n- Erstellen Sie Listen mit Zahlen, Sternchen oder Bindestrichen vor den Elementen. Rücken Sie Elemente ein, um verschachtelte Listen zu erstellen.\n- Erstellen Sie Links so: `[psyTeachR](https://psyteachr.github.io/)`\n- Laden Sie den [R Markdown Spickzettel](https://www.rstudio.org/links/r_markdown_cheat_sheet) herunter, um mehr zu erfahren.\n\nKopieren und fügen Sie den unten stehenden Text in den weißen Raum unterhalb des Codeblocks, der die Daten lädt, ein. Speichern Sie die Datei und klicken Sie dann auf Stricken, um die Ergebnisse zu sehen. Es wird ein wenig unordentlich aussehen, da es den Code und die Nachrichten vom Laden der Daten enthält, aber keine Sorge, wir werden das bald loswerden.\n\n```{verbatim, lang=\"md\", filename=\"sales_data.Rmd\"}\n## Beispiel-Verkaufsbericht\n\nDieser Bericht fasst die Verkaufsdaten für verschiedene Fahrzeugtypen zusammen, die zwischen 2003 und 2005 verkauft wurden. Diese Daten stammen von [Kaggle](https://www.kaggle.com/kyanyoga/sample-sales-data).\n\n### Verkäufe nach Typ\n\nDie *gesamte* Anzahl verkaufter **Flugzeuge** betrug `r sales_counts$n[3]`\n\nDie *gesamte* Anzahl verkaufter **klassischer Autos** betrug `r sales_counts$n[1]`.\n```\n\n\n::: {.callout-warning}\nDas obige Beispiel-Markdown (und der Rest in diesem Buch) wird für den regulären Editor gezeigt, nicht für den visuellen Editor. Im visuellen Editor sehen Sie nicht die Rauten, die Überschriften erstellen, oder die Sternchen, die fetten und kursiven Text erstellen. Sie sehen auch nicht die Rückwärts-Apostrophen, die Inline-Code kennzeichnen.\n\n```{r visual-editor-example, echo = FALSE, fig.cap=\"Der obige Beispielcode im visuellen Editor.\"}\nknitr::include_graphics(\"images/reports/visual-editor-example.png\")\n```\n\nWenn Sie versuchen, die Rauten, Sternchen und Rückwärts-Apostrophen zum visuellen Editor hinzuzufügen, werden Sie frustriert sein, da sie verschwinden. Wenn Sie Erfolg haben, wird Ihr Code im regulären Editor so aussehen:\n\n```{verbatim, lang=\"md\"}\n\\#\\#\\# Verkäufe nach Typ\n\nDer \\*gesamte\\* Anzahl von \\*\\*Flugzeugen\\*\\* verkauft war \\`r sales_counts\\$n\\[3]\\`\n```\n\n:::\n\nVersuchen Sie, den Inline-Code mit dem zu vergleichen, was in der Tabelle `sales_counts` steht. Zu beachten:\n\n* Das `$`-Zeichen wird verwendet, um bestimmte Variablen (oder Spalten) in einem Objekt mit der Syntax `object$variable` anzugeben.\n* Eckige Klammern mit einer Zahl, z. B. `[3]`, geben eine bestimmte Beobachtung an\n* Also fragt `sales_counts$n[3]` den Inline-Code, die dritte Beobachtung der Variablen `n` im Datensatz `sales_online` anzuzeigen.\n\n::: {.callout-note .try}\n## Weitere Übung\n\nFügen Sie eine weitere Zeile hinzu, die die Gesamtzahlen der **Motorräder** mit Inline-Code meldet. Verwenden Sie entweder den visuellen Editor oder Text-Markups, um Fettdruck und Kursivschrift hinzuzufügen, damit es den anderen entspricht.\n\n`r hide()`\n```{verbatim, lang=\"md\", filename=\"sales_data.Rmd\"}\nDie *gesamte* Anzahl verkaufter **Motorräder** betrug `r sales_counts$n[2]`.\n```\n`r unhide()`\n\n:::\n\n### Codekommentare {#sec-comments}\n\nIm obigen Code haben wir Code **Kommentare** verwendet, und es ist wichtig zu betonen, wie nützlich diese sind. Sie können Kommentare in R-Blöcken mit dem Rautensymbol (`#`) hinzufügen. R wird Zeichen vom Rautensymbol bis zum Ende der Zeile ignorieren.\n\n```{r}\n# wichtige Zahlen\n\nn <- nrow(sales_online) # die Gesamtanzahl der Verkäufe (Anzahl der Zeilen)\nfirst <- min(sales_online$YEAR_ID) # das erste (minimale) Jahr\nlast <- max(sales_online$YEAR_ID) # das letzte (maximale) Jahr\n```\n\nEs ist normalerweise eine gute Praxis, einen Codeblock mit einem Kommentar zu beginnen, der erklärt, was Sie dort tun, besonders wenn der Code nicht im Text des Berichts erklärt wird.\n\nWenn Sie Ihre Objekte klar benennen, müssen Sie oft keine klärenden Kommentare hinzufügen. Zum Beispiel, wenn ich die drei oben genannten Objekte `total_number_of_sales`, `first_year` und `last_year` genannt hätte, würde ich die Kommentare weglassen. Es ist eine Kunst, Ihren Code gut zu kommentieren, aber versuchen Sie, Kommentare hinzuzufügen, während Sie durch dieses Buch arbeiten - es wird Ihnen helfen, Ihr Lernen zu festigen, und wenn das z\n\nukünftige Sie Ihren Code überprüft, werden Sie dem vergangenen Sie für die Klarheit danken.\n\n### Bilder {#sec-rmd-images}\n\nWie das Sprichwort sagt, malt ein Bild tausend Worte und manchmal möchten Sie Ihre Daten mithilfe von Visualisierungen kommunizieren.\n\nErstellen Sie einen Codeblock, um ein Diagramm der Daten in Ihrem Dokument nach dem bisher geschriebenen Text anzuzeigen. Wir verwenden einen Code, den Sie in @sec-viz genauer kennenlernen werden, um ein einfaches Balkendiagramm zu erstellen, das die Verkaufsdaten darstellt -- konzentrieren Sie sich darauf zu versuchen, zu verstehen, wie Teile des Codes auf das erstellte Diagramm abgebildet werden.\n\nKopieren und fügen Sie den unten stehenden Code ein. Führen Sie den Code in Ihrem Markdown aus, um das Diagramm zu sehen, das es erstellt, und stricken Sie dann die Datei, um zu sehen, wie es in Ihrem Dokument angezeigt wird.\n\n```{r, filename=\"sales_data.Rmd\"}\nggplot(data = sales_counts, \n       mapping = aes(x = PRODUCTLINE, \n                     y = n, \n                     fill = PRODUCTLINE)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Fahrzeugtyp\",\n       y = \"Anzahl der Verkäufe\",\n       title = \"Verkäufe nach Fahrzeugtyp\",\n       subtitle = \"2003 - 2005\")\n```\n\nSie können auch Bilder einfügen, die Sie nicht in R erstellt haben, indem Sie die Markdown-Syntax für Bilder oder `knitr::include_graphics()` verwenden. Dies ist sehr ähnlich dem Laden von Daten, da Sie entweder ein Bild verwenden können, das auf Ihrem Computer gespeichert ist, oder über eine URL.\n\nErstellen Sie einen neuen Codeblock unterhalb jeder der Verkaufszahlen für Flugzeuge, klassische Autos und Motorräder und fügen Sie ein Bild von Google oder Wikipedia für jedes hinzu (klicken Sie mit der rechten Maustaste auf ein Bild und wählen Sie Bildadresse kopieren, um eine URL zu erhalten). Sehen Sie sich den Abschnitt über [Chunk-Standards](#rmd-setup) an, um zu sehen, wie Sie die Anzeigegröße ändern können.\n\n```{r fig-example, eval = FALSE, filename=\"sales_data.Rmd\"}\nknitr::include_graphics(\"https://upload.wikimedia.org/wikipedia/commons/3/3f/P-51_Mustang_edit1.jpg\")\n```\n\n::: {.callout-note collapse=\"true\"}\n## Bildlizenzen\n\nDie meisten Bilder auf Wikipedia sind gemeinfrei oder haben eine offene Lizenz. Sie können Bilder nach Lizenz auf Google Bilder suchen, indem Sie auf die Schaltfläche <if>Tools</if> klicken und \"Creative Commons-Lizenzen\" aus dem Menü \"Nutzungsrechte\" wählen.\n\n```{r, echo=FALSE, fig.alt=\"Screenshot der Google Bilder-Schnittstelle mit geöffneten Auswahlmöglichkeiten für Nutzungsrechte.\"}\nknitr::include_graphics(\"images/reports/google-images.png\")\n```\n:::\n\nAlternativ können Sie die Markdown-Notation `![caption](url)` verwenden, um ein Bild anzuzeigen. Dies geht in den Markdown-Textbereich des Dokuments, nicht innerhalb eines grauen Codeblocks. Die Beschriftung ist optional; Sie können sie weglassen, wie dies:\n\n`![](images/reports/google-images.png)`\n\n\n### Tabellen {#sec-rmd-tables}\n\nAnstatt eine Abbildung zu verwenden, möchten wir vielleicht unsere Daten in einer Tabelle anzeigen.\n\n* Fügen Sie eine neue Überschrift der Ebene 2 (zwei Rauten) zu Ihrem Dokument hinzu, benennen Sie die Überschrift \"Daten in Tabellenform\", und erstellen Sie dann einen neuen Codeblock darunter.\n\nZuerst sehen wir, wie die Tabelle aussieht, wenn wir keine Änderungen vornehmen. Schreiben Sie einfach den Namen der Tabelle, die Sie anzeigen möchten, in den Codeblock (in unserem Fall `sales_counts`), und klicken Sie dann auf Stricken, um zu sehen, wie sie aussieht.\n\n```{r, eval = FALSE, filename=\"sales_data.Rmd\"}\nsales_counts\n```\n\n```\n## # A tibble: 3 × 2\n## # Groups:   PRODUCTLINE [3]\n##   PRODUCTLINE      n\n##   <chr>        <int>\n## 1 Classic Cars   967\n## 2 Motorcycles    331\n## 3 Planes         306\n```\n\nEs ist gerade noch lesbar, aber nicht großartig.\n\nEine andere Möglichkeit, Tabellen anzupassen, verwendet die Funktion `kable()` aus dem Paket `kableExtra`.\n\nÄndern Sie Ihren Code, um das Paket `kableExtra` zu laden und die Funktion `kable()` auf die Tabelle anzuwenden. Stricken Sie die Datei erneut, um das Ergebnis zu sehen.\n\n```{r, filename=\"sales_data.Rmd\"}\nlibrary(kableExtra) # für die Tabellenanzeige\n\nkable(sales_counts) # wende die kable-Funktion an\n```\n\nEs ist besser, aber immer noch nicht erstaunlich. Also lassen Sie uns einige Anpassungen vornehmen. Wir können die Namen der Spalten ändern, eine Beschriftung hinzufügen und auch die Ausrichtung des Zellinhalts mithilfe von Argumenten für `kable()` ändern.\n\nWir können auch ein Thema hinzufügen, um den Gesamtstil zu ändern. In diesem Beispiel haben wir `kable_classic` verwendet, aber es gibt 5 andere: `kable_paper`, `kable_classic_2`, `kable_minimal`, `kable_material` und `kable_material_dark`. Probieren Sie sie alle aus und sehen Sie, welchen Sie bevorzugen.\n\nSchließlich können wir die Formatierung der ersten Zeile mithilfe von `row_spec` ändern. Schauen Sie sich die Hilfedokumentation für `row_spec` an, um zu sehen, welche anderen Optionen verfügbar sind. Versuchen Sie, den Wert eines der folgenden Argumente zu ändern, um herauszufinden, was sie tun.\n\n```{r, filename=\"sales_data.Rmd\"}\nk <- kable(sales_counts, \n      col.names = c(\"Produkt\", \"Verkäufe\"),\n      caption = \"Anzahl der Verkäufe pro Produktlinie.\", \n      align = \"c\")\nk_style <- kable_classic(k, full_width = FALSE) \nk_highlighted <- row_spec(k_style, row = 0, bold = TRUE, color = \"red\") \n\nk_highlighted\n```\n\n::: {.callout-note}\n## Platzierung der Beschriftung\n\nDas Aussehen und die Platzierung der Tabellenbeschriftung hängen von der Art des Dokuments ab, das Sie erstellen. Ihre Beschriftungen sehen möglicherweise anders aus als die in diesem Buch, da Sie ein `html_document` mit einer einzigen Seite erstellen, während dieses Buch den `html`-Stil von [quarto](https://quarto.org/) verwendet, einer neueren Alternative zu R Markdown. Sie werden mehr über andere Dokumentausgabetypen in @sec-custom-reports lernen.\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Erweiterte Tabellenanpassung\n\nWenn Sie sich mit dem bisher Besprochenen sicher fühlen, gibt das [kableExtra-Vignette](https://haozhu233.github.io/kableExtra/awesome_table_in_html.html){target=\"_blank\"} viel mehr Details darüber, wie Sie Ihre Tabellen mithilfe von `kableExtra` bearbeiten können.\n\nSie können auch das [gt](https://gt.rstudio.com/){target=\"_blank\"}-Paket erkunden, das komplex ist, aber es Ihnen ermöglicht, wunderschöne angepasste Tabellen zu erstellen. [Riding tables with {gt} and {gtExtras}](https://bjnnowak.netlify.app/2021/10/04/r-beautiful-tables-with-gt-and-gtextras/){target=\"_blank\"} ist ein hervorragendes Tutorial.\n:::\n\n## Ihren Bericht verfeinern\n\n### Chunk-Standards {#sec-rmd-setup}\n\nLassen Sie uns damit abschließen, den Bericht aufzuräumen und unseren Code etwas besser zu organisieren. Wenn Sie eine neue R Markdown-Datei in RStudio erstellen, wird automatisch ein Setup-Block erstellt - wir haben diesen Block bisher größtenteils ignoriert.\n\n```{r knitr-setup, eval=FALSE, verbatim=\"r setup, include=FALSE\"}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\nSie können hier weitere Standardoptionen für Ihr Dokument festlegen. Geben Sie den folgenden Code in die Konsole ein, um die vollständige Liste der Optionen, die Sie festlegen können, und ihrer Standardwerte zu sehen. Die nützlichsten und häufigsten Optionen, die Sie für das Schreiben von Berichten ändern möchten, drehen sich jedoch darum, ob Sie Ihren Code anzeigen möchten und wie groß Ihre Bilder sein sollen.\n\n```{r, eval = FALSE, filename=\"In der Konsole ausführen\"}\n# Liste der Standardoptionen\nstr(knitr::opts_chunk$get())\n```\n\n\nErsetzen Sie den Code in Ihrem Setup-Block mit dem unten stehenden Code und versuchen Sie dann, jede Option von `FALSE` auf `TRUE` zu ändern und die numerischen Werte zu ändern, und stricken Sie die Datei erneut, um den Unterschied zu sehen, den es macht.\n\n```{r knitr-setup2, eval=FALSE, verbatim=\"r setup, include=FALSE\", filename=\"sales_data.Rmd\"}\nknitr::opts_chunk$set(\n  echo       = FALSE, # ob Codeblöcke angezeigt werden\n  message    = FALSE, # ob Nachrichten von Ihrem Code angezeigt werden\n  warning    = FALSE, # ob Warnungen von Ihrem Code angezeigt werden\n  fig.width  = 8,     # Abbildungsbreite in Zoll (bei 96 dpi)\n  fig.height = 5,     # Abbildungshöhe in Zoll (bei 96 dpi)\n  out.width = \"50%\"   # Abbildungen/Bilder nehmen 50% der Seitenbreite ein\n)\n```\n\n::: {.callout-warning collapse=\"true\"}\n## Abbildungs- versus Ausgabedimensionen\n\nBeachten Sie, dass `fig.width` und `fig.height` die ursprüngliche Größe und das Seitenverhältnis von Bildern steuern, die von R generiert werden, wie z. B. Diagramme. Dies beeinflusst die relative Größe von Text und anderen Elementen in Diagrammen. Es hat keinen Einfluss auf die Größe vorhandener Bilder. `out.width` steuert jedoch die **Anzeigegröße** sowohl vorhandener Bilder als auch von R generierter Abbildungen. Dies wird normalerweise als Prozentsatz der Seitenbreite eingestellt.\n\n```{r fig-full-100, echo = FALSE, fig.width=8, fig.height=5, out.width=\"100%\", fig.cap=\"Ein Diagramm mit den Standardwerten von fig.width = 8, fig.height = 5, out.width = \\\"100%\\\"\"}\nggplot(diamonds, aes(color, fill = cut)) + geom_bar()\n```\n\n```{r fig-half-100, echo = FALSE, fig.width=4, fig.height=2.5, out.width=\"100%\", fig.cap=\"Das gleiche Diagramm mit der Hälfte der Standardbreite und -höhe: fig.width = 4, fig.height = 2.5, out.width = \\\"100%\\\"\"}\nggplot(diamonds, aes(color, fill = cut)) + geom_bar()\n```\n\n```{r fig-half-50, echo = FALSE, fig.width=4, fig.height=2.5, out.width=\"50%\", fig.cap=\"Das gleiche Diagramm wie oben bei der Hälfte der Ausgabebreite: fig.width = 4, fig.height = 2.5, out.width = \\\"50%\\\"\"}\nggplot(diamonds, aes(color, fill = cut)) + geom_bar()\n```\n\n:::\n\n### Standards überschreiben\n\nDiese Setup-Optionen ändern das Verhalten für das gesamte Dokument, jedoch können Sie das Verhalten für einzelne Codeblöcke überschreiben.\n\nZum Beispiel möchten Sie standardmäßig vielleicht Ihren Code verbergen, aber es könnte auch eine Gelegenheit geben, bei der Sie den Code, den Sie zur Analyse Ihrer Daten verwendet haben, anzeigen möchten. Sie können `echo = FALSE` in Ihrem Setup-Block einstellen, um das Verbergen von Code zur Standardeinstellung zu machen, aber im einzelnen Codeblock für Ihr Diagramm `echo = TRUE` einstellen. Versuchen Sie dies jetzt und stricken Sie die Datei, um die Ergebnisse zu sehen.\n\n```{r show-code, eval=FALSE, verbatim = \"r, echo = TRUE\", filename=\"sales_data.Rmd\"}\nggplot(data = sales_counts, \n       mapping = aes(x = PRODUCTLINE, \n                     y = n, \n                     fill = PRODUCTLINE)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Fahrzeugtyp\",\n       y = \"Anzahl der Verkäufe\",\n       title = \"Verkäufe nach Fahrzeugtyp\",\n       subtitle = \"2003 - 2005\")\n```\n\nZusätzlich können Sie auch die Standardanzeigegröße oder -abmessungen von Bildern überschreiben.\n```{r change-image, eval = FALSE, verbatim = \"r, out.width='25%'\"}  \nknitr::include_graphics(\"https://upload.wikimedia.org/wikipedia/commons/3/3f/P-51_Mustang_edit1.jpg\")  \n```  \n\n```{r change-image2, eval=FALSE, verbatim = \"r, fig.width = 10, fig.height = 20\", filename=\"sales_data.Rmd\"}  \nggplot(data = sales_counts,  \n       mapping = aes(x = PRODUCTLINE, y = n, fill = PRODUCTLINE)) +  \n  geom_bar(stat = \"identity\", show.legend = FALSE) +  \n  labs(x = \"Fahrzeugtyp\",  \n       y = \"Anzahl der Verkäufe\",  \n       title = \"Verkäufe nach Fahrzeugtyp\",  \n       subtitle = \"2003 - 2005\")  \n```  \n\n### Pakete laden  \n\nSie sollten die Pakete, die Sie benötigen, in Ihrem Setup-Block mit `library()` laden. Oft, wenn Sie an einem Skript arbeiten, stellen Sie fest, dass Sie ein weiteres Add-on-Paket laden müssen. Vergraben Sie den Aufruf von `library(package_I_need)` nicht irgendwo im Skript. Fügen Sie es in den Setup-Block ein, damit der Benutzer einen Überblick darüber hat, welche Pakete benötigt werden.  \n\n::: {.callout-note .try}  \n## Bibliotheksaufrufe in den Setup-Block verschieben  \nVerschieben Sie den Code, der `tidyverse` und `kableExtra` lädt, in den Setup-Block.  \n:::  \n\n### YAML-Header {#sec-yaml}  \n\nSchließlich ist der `r glossary(\"YAML\")`-Header der Teil ganz oben in Ihrem Markdown-Dokument. Hier können Sie auch mehrere Optionen festlegen.  \n\n```  \n---  \ntitle: \"Verkaufsdaten-Bericht\"  \nauthor: \"Ihr Name\"  \noutput:  \n  html_document:  \n    df_print: paged  \n    theme:  \n      version: 4  \n      bootswatch: yeti  \n    toc: true  \n    toc_float:  \n      collapsed: false  \n      smooth_scroll: false  \n    toc_depth: 3  \n    number_sections: false  \n---  \n```  \n\n::: {.callout-note}  \n## Versuchen  \nÄndern Sie die Werte von `false` auf `true`, um zu sehen, was die Optionen bewirken.  \n:::  \n\nDie Option `df_print: paged` druckt Datenrahmen automatisch mit `rmarkdown::paged_table()` aus. Sie können `df_print: kable` verwenden, um standardmäßig den einfachen kable-Stil zu verwenden, aber Sie benötigen den Code aus @sec-rmd-tables für komplexere Tabellen mit kableExtra.  \n\nDie eingebauten BootsWatch-Themen sind: default, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united und yeti. Sie können [mehr Themen anzeigen und herunterladen](https://bootswatch.com/4/). Ändern Sie das Thema, um zu sehen, welches Ihnen am besten gefällt.  \n\n```{r fig-bootswatch, echo=FALSE, fig.cap=\"Helle Themen in den Versionen 3 und 4.\"}  \nknitr::include_graphics(\"images/reports/bootswatch.png\")  \n```  \n\n::: {.callout-warning}  \n## YAML-Formatierung  \n\nYAML-Header können sehr wählerisch in Bezug auf Leerzeichen und Semikolons sein (der Rest von R Markdown ist viel verzeihender). Wenn Sie beispielsweise ein Leerzeichen vor \"author\" einfügen, erhalten Sie einen Fehler, der wie folgt aussieht:  \n\n```  \nError in yaml::yaml.load(..., eval.expr = TRUE) :  \n  Parser error: while parsing a block mapping at line 1,  \n  column 1 did not find expected key at line 2, column 2  \n```  \n\nDie Fehlermeldung zeigt Ihnen genau, wo das Problem liegt (das zweite Zeichen der zweiten Zeile des YAML-Headers), und es handelt sich normalerweise um Tippfehler oder falsche Einrückungen.  \n:::  \n\n### Inhaltsverzeichnis {#sec-toc}  \n\nDas Inhaltsverzeichnis wird erstellt, indem `toc: true` gesetzt wird. Es wird oben in Ihrem Dokument angezeigt, es sei denn, Sie setzen `toc_float: true` oder fügen `toc_float:` mit den Optionen `collapsed` und `smooth_scroll` hinzu (Optionen für eine Einstellung werden darunter eingerückt).  \n\n```  \n---  \noutput:  \n  html_document:  \n    toc: true  \n    toc_float:  \n      collapsed: false  \n      smooth_scroll: false  \n    toc_depth: 3  \n---  \n```  \n\nDies verwendet die Markdown-Überschriftenstruktur, um das Inhaltsverzeichnis zu erstellen. `toc_depth: 3` bedeutet, dass das Inhaltsverzeichnis nur Überschriften bis Ebene 3 anzeigt (d. h. diejenigen, die mit drei Rauten beginnen: `###`). Fügen Sie `{-}` nach dem Überschriftentitel hinzu, um es aus dem Inhaltsverzeichnis zu entfernen (z. B. `### Übersicht {-}`).  \n\n::: {.callout-caution}  \n## Falsch formatiertes ToC  \n\nWenn Ihr Inhaltsverzeichnis nicht richtig angezeigt wird, bedeutet dies wahrscheinlich, dass Ihre Überschriften nicht richtig eingerichtet sind. Stellen Sie sicher, dass Überschriften keine Leerzeichen vor den Rauten und mindestens ein Leerzeichen nach den Rauten haben. Zum Beispiel wird `##Analysis` nicht als Überschrift angezeigt und dem Inhaltsverzeichnis hinzugefügt, aber `## Analysis` schon.  \n:::  \n\n### Formate  \n\nBisher haben wir nur nach HTML gestrickt. Um PDF-Berichte zu erstellen, müssen Sie <pkg>tinytex</pkg> [@R-tinytex] installieren und den folgenden Code in der Konsole ausführen (fügen Sie dies **nicht** in Ihr Rmd-Skript ein):  \n\n```{r eval=FALSE, filname=\"In der Konsole ausführen\"}  \ninstall.packages(\"tinytex\")  \ntinytex::install_tinytex()  \n```  \n\nSobald Sie dies getan haben, aktualisieren Sie Ihren YAML-Header, um einen `pdf_document`-Abschnitt hinzuzufügen, und stricken Sie ein PDF-Dokument. Die Optionen für PDFs sind im Vergleich zu HTML-Dokumenten eingeschränkter, daher müssen Sie möglicherweise einige Optionen entfernen, wie z. B. `toc_float`, wenn Sie eine Fehlermeldung erhalten, die so aussieht: \"Functions that produce HTML output found in document targeting PDF output.\"  \n\n```  \n---  \noutput:  \n  pdf_document:  \n    toc: TRUE  \n  html_document:  \n    toc: TRUE  \n    toc_float: TRUE  \n---  \n```  \n\nAls Alternative können Sie auch in ein Word-Dokument stricken. Wenn Sie auf die Schaltfläche **`Knit`** klicken, wird standardmäßig das erste Format gestrickt, aber Sie können das Dropdown-Menü unter der Schaltfläche Knit verwenden, um ein anderes Format auszuwählen.  \n\n```  \n---  \noutput:  \n  pdf_document:  \n    toc: TRUE  \n  html_document:  \n    toc: TRUE  \n    toc_float: TRUE  \n  word_document:  \n    toc: TRUE  \n---  \n```  \n\n::: {.callout-warning}  \n## Strickfehler  \n\nWenn Sie auf Fehler stoßen, fragen Sie im Teams um Hilfe - das Stricken zu PDF oder Word kann knifflig sein.  \n:::  \n\n### Zusammenfassung {#sec-reports-summary}  \n\nDieses Kapitel hat viel abgedeckt, aber hoffentlich haben Sie jetzt eine viel bessere Vorstellung davon, was Markdown leisten kann. Während die Arbeit in Markdown am Anfang länger dauert, können Sie, sobald Sie einen vollständig reproduzierbaren Bericht haben, neue Daten jede Woche oder jeden Monat einfügen und einfach auf Stricken klicken, um doppelten Aufwand und menschliche Fehler zu reduzieren.  \n\nSie können eine [arbeitsfähige R Markdown-Datei](demos/sales_data.Rmd){download=\"important_info.Rmd\"} mit dem Code aus dem obigen Beispiel vergleichen.  \n\nIm weiteren Verlauf des Buches werden Sie lernen, wie man Daten bereinigt und analysiert und wie man Markdown verwendet, um sie zu präsentieren. Wir werden die verfügbaren Anpassungsoptionen langsam erweitern, sodass Ihre Markdown-Berichte im Laufe der nächsten Wochen immer polierter und professioneller aussehen werden.\n\n## Glossar {#sec-glossary-intro}\n\nDas Glossar am Ende jedes Kapitels definiert gängige Fachbegriffe, denen du beim Erlernen von R begegnen könntest. Dieser spezialisierte Wortschatz kann dir helfen, effizienter zu kommunizieren und nach Lösungen für Probleme zu suchen. Die unten stehenden Begriffe verlinken zum [PsyTeachR-Glossar](https://psyteachr.github.io/glossary/), das weitere Informationen und Beispiele enthält.\n\n```{r, echo = FALSE}\nglossary_table()\n```","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"html-table-processing":"none"},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["panelize","webr"],"css":["include/psyteachr.css","include/webex.css","include/style.css"],"highlight-style":"a11y","include-after-body":["include/webex.js","include/script.js"],"output-file":"02.1-markdown.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","bibliography":["include/book.bib","include/packages.bib"],"csl":"include/apa.csl","webr":{"packages":["tidyverse"]},"theme":{"light":["flatly","include/light.scss"],"dark":["darkly","include/dark.scss"]},"code-copy":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}