{"title":"Einführung in R und RStudio","markdown":{"headingText":"Einführung in R und RStudio","containsRefs":false,"markdown":"\n## Lerziele\n\n-   Wissen, was R und RStudio ist\n-   Umfang und Möglichkeiten von R kennen\n\n## Wieso R? {#sec-intro}\n\nR ist eine Programmiersprache, die speziell für statistische Datenanalyse und grafische Darstellungen entwickelt wurde. Sie eignet sich hervorragend für eine Vielzahl von Anwendungen, von einfachen Berechnungen bis hin zu komplexen machine learning Verfahren.\n\nEin grosser Vorteil von R ist, dass es sich um eine 'open-source' und frei verfügbare Software handelt. Dies ist unterscheidet R von anderen für die statistische Datenanalyse entwickelter Software wie zum Beispiel SPSS und STATA.\n\nEin weiterer Pluspunkt von R ist die grosse und freundliche Community, die sich über die Jahre entwickelt hat. Diese Community entwickelt Pakete für R und bietet auf Plattformen wie [Stackoverflow.com](https://stackoverflow.com/questions/tagged/r) Hilfe bei Problemen mit R an. Wie wir im Verlauf der Vorlesung sehen werden, ist diese Community und Hilfe Foren wie stackoverflow ein wichtiger Grund, wieso künstliche Intelligenz wie ChatGPT besser in R als zum Beispiel in SPSS programmieren kann.\n\n## Wieso R Studio?\n\nNachdem man R installiert hat (werden wir gleich tun) könnte man, wie im Screenshot unten dargestellt, direkt in einem Terminal losprogrammieren.\n\n```{r, echo=FALSE}\nknitr::include_graphics(\"_main_files/figure-html/R Konsole.png\")\n```\n\nUm das Programmieren angenehmer zu machen, werden aber sogenannte 'integrated development environment (IDE)' verwendet. RStudio (siehe Bild unten) ist eine solche 'IDE' und vereinfacht das Arbeiten mit R enorm. Rstudio ist in vier Felder aufgeteilt, die das Arbeiten mit R übersichtlicher machen. Oben links befindet sich das sogenannte \"Source\" fenster. Das ist nichts anderes, als ein Text Editor. Also ähnlich wie Word, aber optimiert zum Programmieren. Das erkennt man unter anderem daran, dass der Text unterschiedlich eingefärbt ist. Das erleichtert das lesen von Code. Im \"Source\" Fenster öffnet oder schreibt man sogenannte \"Skripte\". Das sind Textdateien, die von oben nach unten von R ausgeführt werden. Diese Skripte werden normalerweise im R-Format gespeichert (an der \".R\" Dateierweiterung zu erknnen). Dies sorgt dafür, das solche Skripte automatisch von RStudio geöffnet werden, wenn man sie anklickt.\n\n```{r, echo=FALSE}\nknitr::include_graphics(\"_main_files/figure-html/RStudio_IDE_screenshot.png\")\n```\n\nDer Code (Text) im Skript wird dann in die \"Konsole\" (\"Console\"), das Fenster unten links, \"geschickt\". Wie im Video unten gezeigt, kann man dies mit dem \"Run\" Button tun oder besser, indem man Ctr + Enter oder Cmd + Enter drückt. Dann wird der Code von R interpretiert (ausgeführt). Je nach ausgeführtem Code sieht man dann einen output in der Konsole (unten links) oder im Fenster unten rechts, falls der ausgeführte Text eine Grafik (plot) produziert. Es kann auch sein, dass man keinen Output sieht, wenn man ein sogenanntes \"Objekt\" generiert. Dies geschieht mit dem Zuweisungspfeil `<-`. Dieses Objekt sieht man dann oben rechts im \"Environnment\" Fenster. Mehr dazu später, jetzt installieren wir erstmal R und RStudio!\n\n```{r, echo=FALSE}\nknitr::include_graphics(\"_main_files/figure-html/Rstudio IDE.gif\")\n```\n\n## R und RStudio installieren\n\n### Für Mac\n\nR kann unter [diesem Link](https://cran.r-project.org/bin/macosx/) heruntergeladen werden. Achte darauf, dass du die richtige Version (Mac, Windows, oder Linux installierst). Falls du einen Mac hast, musst du noch zwischen der \"For Apple silicon\" und der \"For older Intel Macs\" Option wählen. Falls du einen Mac mit \"M\" Chip hast, wählst du \"Apple silicon\" (rot umrandet), sonst \"Intel\" (blau umrandet). Falls du nicht weisst, welcher Chip in deinem Mac verbaut ist, kannst du auf das Apple Logo links oben klicken und dann auf \"Über diesen Mac\". Wenn dann unter Chip \"Apple M...\" gelistet ist, installierst du die \"Apple silicon\" Variante, sonst die \"Intel\" Variante.\n\n```{r, echo=FALSE}\nknitr::include_graphics(\"_main_files/figure-html/install_mac_os.png\")\n```\n\n### Für Windows\n\nR kann unter [diesem Link](https://cran.r-project.org/bin/windows/) heruntergeladen werden. Klicke auf den \"base\" Link, um R herunterzuladen.\n\n```{r, echo=FALSE}\nknitr::include_graphics(\"_main_files/figure-html/R install windows.png\")\n```\n\n### RStudio\n\nNun können wir RStudio [diesem Link](https://posit.co/download/rstudio-desktop/) herunterladen und installieren. Achte wieder darauf, dass du die richtige Version auswählst.\n\nNachdem wir RStduio zum ersten mal öffnen, müssen wir kurz etwas in den Einstellungen ändern. Auf einem Mac gehts du dafür auf Tools -\\> Global Options, in Windows geht das über das 'Preferences' Menü. Im obersten Tab ('General') musst du unter dem Header 'Workspace' das Häckchen bei der Option \"Restore .RData into workspace at startup\" entfernen und aus dem Dropdown Menü darunter die Option \"Never\" auswählen.\n\n```{r, echo=FALSE}\nknitr::include_graphics(\"_main_files/figure-html/setup_workspace.png\")\n```\n\nDas sorgt dafür, dass nichts in der Konsole gespeichert bleibt, wenn wir RStudio schliessen. Dies ist wichtig für die Reproduzierbarkeit unserer Analysen.\n\n## RStudio Projekte\n\nEin weiterer Vorteil von RStudio sind sogenannte \"Projekte\". Projekte können direkt in RStudio erstellt. Ein Projekt ist nichts anderes als ein Ordner, der alle für ein Datenanalyse Projekt notwendigen Dateien enthält. Wie wir später sehen werden, vereinfacht das die Organisation (z.B. das Laden von Datensätzen) sehr. Deshalb erstellen wir als erstes, nachdem wir RStudio geöffnet haben, ein solches Projekt. Das unten abgebildete GIF zeigt dir, wie das geht. Du kannst das Projekt nennen, wie du möchtest. Speichere das Projekt in einem Ordner, den du einfach wieder findest (z.B. in dem Ordner, in dem du auch die Vorlesungsfolien speicherst).\n\n```{r, echo=FALSE}\nknitr::include_graphics(\"_main_files/figure-html/neues_rstudio_projekt.gif\")\n```\n\nNachdem du das Projekt erstellt hast wird es automatisch in RStduio geöffnet. Schliesse nun RStudio und öffne den Ordner, der durch das erstellen des Projektes erstellt wurde. In diesem Ordner sollte sich nur eine `.Rproj` Datei befinden, die so heisst, wie dein eben erstelltes Projekt. Durch Doppelklick auf diese Datei öffnet sich RStudio mit deinem Projekt.\n\nWie gesagt vereinfachen Projekte vor allem die Organisation von Datenanalyseprojekten. Dafür erstellen wir nun eine Ordner Struktur, mit der wir im Verlauf des Semesters arbeiten werden. Die Ordnerstruktur ist unten abgebildet. Zuerst erstellen wir einen Ordner namens \"Data\". In diesem Ordner werden wir die Rohdaten abspeichern, die wir analysieren werden. Als nächstes erstellen wir den \"Script\" Ordner. In diesem Ordner werden wir unsere Analyseskripte speichern. Als letztes erstellen wir noch den \"Output\" Ordner. Dort speichern wir outputs wie plots und gereinigte Datensätze. Generiere dafür jeweils noch die zwei Unterordner \"Plots\" und \"Data\".\n\n```{r, echo=FALSE}\nknitr::include_graphics(\"_main_files/figure-html/RPROJECT_2000dpi.png\")\n```\n\n\n::: {.small_left}\n<img src=\"_main_files/figure-html/Smiling-Cat.jpg\"/>\n:::\n\nFalls alles funktioniert hat, blickst du jetzt stolz und zufrieden auf eine Ordnerstruktur, die die Grundlage für die Übungen der folgenden Wochen bildet.\n\n\n\n::: {.small_right}\n<img src=\"_main_files/figure-html/scared-cat.jpg\"/>\n:::\n\nUnd keine Angst, falls etwas nicht wie beschrieben funktioniert hat. Das wird immer wieder vorkommen und passiert auch erfahrenen ProgramiererInnen häufig.\n\n\n\n\nVersuche es erneut, falls etwas nicht geklappt hat. Frage deine KommilitonInnen, Google, ChatGPT, oder mich um Hilfe. Wenn es nach einigem trial-and-error dann endlich funktioniert, ist die Freude oft umso grösser. GPT-4 hat das ganz gut getroffen:\n\n```{r, echo=FALSE}\nknitr::include_graphics(\"_main_files/figure-html/smiling_cat_gpt.png\")\n```\n\nDas Lachen der von GPT-4 generierten Katze hat eine leichte \"Crazyness\" an sich. Um das zu vermeiden, sollte man bei Sessions mit viel trial-and-error regelmässig Pausen einlegen. \n\n\n\nHere's the translation of the text to German, using the informal \"du\" form:\n\n## Pakete und Funktionen {#sec-packages}\n\nWenn du R installierst, hast du Zugriff auf eine Reihe von `r glossary(\"function\", \"Funktionen\")`, einschließlich Optionen für `r glossary(\"data wrangling\")` und statistische Analysen. Die Funktionen, die in der Standardinstallation enthalten sind, werden typischerweise als `r glossary(\"base R\")` bezeichnet, und du kannst sie dir wie die Standard-Apps vorstellen, die auf deinem Handy vorinstalliert sind.\n\nEines der großartigen Dinge an R ist jedoch, dass es **benutzererweiterbar** ist: Jeder kann eine neue Erweiterung erstellen, die seine Funktionalität erweitert. Es gibt derzeit Tausende von `r glossary(\"package\", \"Paketen\")`, die R-Benutzer erstellt haben, um viele verschiedene Arten von Problemen zu lösen oder einfach nur Spaß zu haben. Es gibt zum Beispiel Pakete für Datenvisualisierung, maschinelles Lernen, interaktive Dashboards, Web Scraping und zum Spielen von Spielen wie Sudoku.\n\nZusatzpakete werden nicht mit base R ausgeliefert, sondern müssen von einem Archiv heruntergeladen und installiert werden, ähnlich wie du zum Beispiel PokemonGo auf dein Smartphone herunterladen und installieren würdest. Das Hauptrepository, in dem sich die Pakete befinden, heißt `r glossary(\"CRAN\")`, das Comprehensive R Archive Network.\n\nEs gibt einen wichtigen Unterschied zwischen dem **Installieren** eines Pakets und dem **Laden** eines Pakets.\n\n### Installieren eines Pakets {#sec-install-package}\n\nDies geschieht mit `install.packages()`. Es ist wie das Installieren einer App auf deinem Handy: Du musst es nur einmal machen, und die App bleibt installiert, bis du sie entfernst. Wenn du zum Beispiel PokemonGo auf deinem Handy nutzen möchtest, installierst du es einmal aus dem App Store oder Play Store; du musst es nicht jedes Mal neu installieren, wenn du es benutzen möchtest. Sobald du die App startest, läuft sie im Hintergrund, bis du sie schließt oder dein Handy neu startest. Ebenso wird das Paket, wenn du es installierst, bei jedem Öffnen von R verfügbar sein (aber nicht *geladen*).\n\nInstalliere das <pkg>tidyverse</pkg>-Paket auf deinem System. Dies ist das Hauptpaket, das wir in diesem Buch für Datenaufbereitung, Zusammenfassungen und Visualisierung verwenden werden. Es ist eigentlich ein Bündel von Paketen, was wir in @sec-tidyverse näher erklären werden.\n\n```{r install-pckg, eval = FALSE, filename = \"In der Konsole ausführen\"}\ninstall.packages(\"tidyverse\")\n```\n\nWenn du eine Meldung erhältst, die in etwa besagt `package 'tidyverse' successfully unpacked and MD5 sums checked`, war die Installation erfolgreich. Wenn du einen Fehler erhältst und das Paket nicht installiert wurde, überprüfe den Abschnitt zur Fehlerbehebung in @sec-package-install-troubleshooting.\n\n::: {.callout-caution}\n## Installiere Pakete nur über die Konsole\n\nInstalliere niemals ein Paket innerhalb eines Skripts. Tue dies nur über die Konsolenansicht oder die Paketansicht im unteren rechten Fenster.\n:::\n\nHier sind einige andere Pakete, die du für die ersten beiden Kapitel installieren solltest.\n\n```{r install-pckg-2, eval = FALSE, filename = \"In der Konsole ausführen\"}\ninstall.packages(\"beepr\") # für Pieptöne\ninstall.packages(\"rmarkdown\") # zum Erstellen von R Markdown-Dateien\ninstall.packages(\"devtools\")  # zum Installieren von Paketen von GitHub\n```\n\nSobald du das <pkg>devtools</pkg>-Paket installiert hast, kannst du auch Pakete von anderen Repositories als CRAN installieren, wie zum Beispiel GitHub. Der folgende Code installiert die Entwicklungsversion eines Pakets zum Erstellen von Waffle-Plots.\n\n```{r install-waffle, eval = FALSE, filename = \"In der Konsole ausführen\"}\n# Installiere das waffle-Paket \ndevtools::install_github(\"hrbrmstr/waffle\")\n```\n\n### Laden eines Pakets\n\nDies geschieht mit der Funktion `library()`. Es ist wie das **Starten** einer App auf deinem Handy: Die Funktionalität ist nur da, wenn die App gestartet ist und bleibt dort, bis du die App schließt oder neu startest. Wenn du zum Beispiel `library(devtools)` innerhalb einer Sitzung ausführst, werden die Funktionen in dem Paket, auf das sich `devtools` bezieht, für deine R-Sitzung verfügbar gemacht. Beim nächsten Start von R musst du `library(devtools)` erneut ausführen, wenn du auf dieses Paket zugreifen möchtest.\n\nNachdem du das <pkg>beepr</pkg>-Paket installiert hast, kannst du es für deine aktuelle R-Sitzung wie folgt laden:\n\n```{r library-pckg, filename=\"In der Konsole ausführen\"}\nlibrary(beepr)\n```\n\nDu könntest beim Laden eines Pakets etwas roten Text sehen, das ist normal. Es warnt dich normalerweise davor, dass dieses Paket Funktionen hat, die den gleichen Namen haben wie andere Pakete, die du bereits geladen hast.\n\n::: {.callout-note}\nDu kannst die Konvention `paket::funktion()` verwenden, um anzuzeigen, in welchem Zusatzpaket sich eine Funktion befindet. Wenn du zum Beispiel `readr::read_csv()` siehst, bezieht sich das auf die Funktion `read_csv()` im Zusatzpaket {readr}. Wenn das Paket mit `library()` geladen ist, musst du den Paketnamen vor einer Funktion nicht angeben, es sei denn, es gibt einen `r glossary(\"conflict\")` (z.B. wenn du zwei Pakete geladen hast, die eine Funktion mit dem gleichen Namen haben).\n:::\n\n### Verwendung einer Funktion\n\nJetzt kannst du die Funktion `beep()` ausführen.\n\n```{r beepr-demo, eval = FALSE, filename=\"In der Konsole ausführen\"}\nbeep()\n```\n\nEine `r glossary(\"function\")` ist ein Name, der sich auf Code bezieht, den du wiederverwenden kannst. Wir beginnen mit der Verwendung von Funktionen, die dir in Paketen zur Verfügung gestellt werden, aber du kannst auch deine eigenen Funktionen schreiben. Nach dem Funktionsnamen steht ein Paar Klammern, die null oder mehr `r glossary(\"argument\", \"Argumente\")` enthalten. Dies sind Optionen, die du einstellen kannst. Im obigen Beispiel hat das Argument `sound` einen `r glossary(\"default value\")` von `1`, was einen \"Ping\"-Ton erzeugt. Versuche, das Argument in eine ganze Zahl zwischen 1 und 11 zu ändern.\n\n```{r beepr-demo-2, eval = FALSE, filename=\"In der Konsole ausführen\"}\nbeep(sound = 8)\n```\n\nWenn du eine Funktion in die Konsolenansicht eingibst, wird sie ausgeführt, sobald du Enter drückst. Wenn du die Funktion in ein `r glossary(\"script\")` oder `r glossary(\"R Markdown\")`-Dokument in der `r glossary(\"panes\", \"Quellenansicht\")` einfügst, wird sie erst ausgeführt, wenn du das Skript ausführst, die R Markdown-Datei `r glossary(\"knit\")`test oder einen Code-`r glossary(\"chunk\")` ausführst. Du wirst mehr darüber in @sec-reports lernen.\n\n### Tidyverse {#sec-tidyverse}\n\n<pkg>tidyverse</pkg> ist ein Meta-Paket, das mehrere Pakete lädt, die wir in fast jedem Kapitel dieses Buches verwenden werden:\n\n- <pkg>ggplot2</pkg>, für Datenvisualisierung (@sec-viz)\n- <pkg>readr</pkg>, für Datenimport (@sec-data)\n- <pkg>tibble</pkg>, für Tabellen (@sec-data)\n- <pkg>tidyr</pkg>, für Datenbereinigung (@sec-tidy)\n- <pkg>dplyr</pkg>, für Datenmanipulation (@sec-wrangle)\n- <pkg>stringr</pkg>, für `r glossary(\"string\", \"Zeichenketten\")`\n- <pkg>forcats</pkg>, für `r glossary(\"factor\", \"Faktoren\")`\n- <pkg>purrr</pkg>, für Wiederholungen\n\nWenn du <pkg>tidyverse</pkg> installierst, werden auch einige andere nützliche Pakete installiert, die du einzeln laden kannst. Du kannst die vollständige Liste mit `tidyverse_packages()` erhalten, aber die Pakete, die wir in diesem Buch verwenden werden, sind:\n\n- <pkg>googlesheets4</pkg>, für die Arbeit mit Google-Tabellen\n- <pkg>readxl</pkg>, für Excel-Dateien\n- <pkg>lubridate</pkg>, für die Arbeit mit Datumsangaben\n- <pkg>hms</pkg>, für die Arbeit mit Uhrzeiten\n- <pkg>rvest</pkg>, für Web Scraping\n\n### Funktionshilfe {#sec-function-help}\n\nWenn du das <pkg>tidyverse</pkg> lädst, werden automatisch alle oben genannten Pakete geladen. Es kann jedoch hilfreich sein zu wissen, aus welchem Paket eine Funktion stammt, wenn du sie googeln musst. Wenn eine `r glossary(\"function\")` in `r glossary(\"base R\")` oder einem geladenen Paket ist, kannst du `?funktionsname` in der Konsole eingeben, um auf die Hilfedatei zuzugreifen. Oben in der Hilfe wird der Funktions- und Paketname angegeben.\n\nWenn das Paket nicht geladen ist, verwende `?paketname::funktionsname` oder gib das Paket in der Funktion `help()` an. Wenn du nicht sicher bist, in welchem Paket sich die Funktion befindet, verwende die Abkürzung `??funktionsname`.\n\n```{r help, eval = FALSE, filename = \"In der Konsole ausführen\"}\n# wenn das Paket geladen ist\n?beepr\nhelp(\"beepr\")\n\n# funktioniert unabhängig davon, ob das Paket geladen ist oder nicht\n?beepr::beep\nhelp(\"beep\", package=\"beepr\") \n\n# zeigt eine Liste potenziell passender Funktionen\n??beep\n```\n\n<div class=\"small_right\" style=\"width: 50%; max-width: 400px;\"><img src=\"images/intro/function_help.png\" /></div>\n\nFunktionshilfe ist immer gleich organisiert. Schaue dir zum Beispiel die Hilfe für `?beepr::beep` an. Oben steht der Name der Funktion und ihr Paket in geschweiften Klammern, gefolgt von einer kurzen Beschreibung der Funktion und einer längeren Beschreibung. Der Abschnitt **Usage** zeigt die Funktion mit allen ihren `r glossary(\"argument\", \"Argumenten\")`. Wenn eines dieser Argumente Standardwerte hat, werden sie wie `funktion(arg = standard)` angezeigt. Der Abschnitt **Arguments** listet jedes Argument mit einer Erklärung auf. Es kann danach einen Abschnitt **Details** mit noch mehr Details über die Funktionen geben. Der Abschnitt **Examples** ist der letzte und zeigt Beispiele, die du in deinem Konsolenfenster ausführen kannst, um zu sehen, wie die Funktion funktioniert.\n\n\n::: {.callout-note .try style=\"clear: both;\"}\n## Funktionshilfe\n\n* Was ist das erste Argument der Funktion `mean`? `r mcq(c(\"trim\", \"na.rm\", \"mean\", answer=\"x\"))`\n* In welchem Paket ist `read_excel`? `r mcq(c(\"readr\", answer=\"readxl\", \"base\", \"stats\"))`\n:::\n\n\n\n\n### Argumente\n\nDu kannst die Argumente/Optionen, die eine Funktion hat, in der Hilfedokumentation nachschlagen. Einige Argumente sind erforderlich, andere optional. Optionale Argumente verwenden oft einen Standardwert (normalerweise in der Hilfedokumentation angegeben), wenn du keinen Wert eingibst.\n\nSchaue dir als Beispiel die Hilfedokumentation für die Funktion `sample()` an, die zufällig Elemente aus einer Liste auswählt.\n\n```{r help-doc, eval=FALSE, filename = \"In der Konsole ausführen\"}\n?sample\n```\n\nDie Hilfedokumentation für `sample()` sollte im unteren rechten Hilfefenster erscheinen. Im Abschnitt \"Usage\" sehen wir, dass `sample()` die folgende Form hat:\n\n```{r arguments, eval = FALSE}\nsample(x, size, replace = FALSE, prob = NULL)\n```\n\nIm Abschnitt \"Arguments\" gibt es Erklärungen für jedes der Argumente. `x` ist die Liste der Elemente, aus denen wir auswählen wollen, `size` ist die Anzahl der Elemente, die wir auswählen wollen, `replace` gibt an, ob jedes Element mehr als einmal ausgewählt werden kann oder nicht, und `prob` gibt die Wahrscheinlichkeit an, mit der jedes Element ausgewählt wird. Im Abschnitt \"Details\" wird angemerkt, dass wenn keine Werte für `replace` oder `prob` eingegeben werden, Standardwerte von `FALSE` (jedes Element kann nur einmal ausgewählt werden) und `NULL` (alle Elemente haben die gleiche Wahrscheinlichkeit, ausgewählt zu werden) verwendet werden. Da es keine Standardwerte für `x` oder `size` gibt, müssen diese angegeben werden, sonst wird der Code nicht ausgeführt.\n\nLass uns ein Beispiel versuchen und nur die erforderlichen Argumente `x` und `size` ändern, um R zu bitten, 5 zufällige Buchstaben auszuwählen (`letters` ist ein eingebauter `r glossary(\"vector\")` der 26 lateinischen Kleinbuchstaben).\n\n```{r, echo = FALSE}\n# stelle sicher, dass die Werte gleich sind\nset.seed(1242016)\n```\n\n```{r rnorm-n}\nsample(x = letters, size = 5)\n```\n\nHier ist die Fortsetzung der Übersetzung ins Deutsche, weiterhin mit der \"du\"-Form:\n\n:::{.callout-note  collapse=\"true\"}\n## Warum sind meine Buchstaben anders als deine Buchstaben?\n\n`sample()` erzeugt eine zufällige Stichprobe. Jedes Mal, wenn du den Code ausführst, erzeugst du eine andere Menge von zufälligen Buchstaben (probiere es aus). Die Funktion `set.seed()` steuert den Zufallszahlengenerator - wenn du Funktionen verwendest, die Zufälligkeit nutzen (wie `sample()`), stellt die Ausführung von `set.seed()` sicher, dass du das gleiche Ergebnis erhältst (in vielen Fällen ist das vielleicht nicht das, was du möchtest). Um die gleichen Zahlen wie wir zu erhalten, führe `set.seed(1242016)` in der Konsole aus und dann führe `sample(x = letters, size = 5)` erneut aus.\n:::\n\nJetzt können wir den Standardwert für das `replace`-Argument ändern, um eine Menge von Buchstaben zu erzeugen, die Duplikate enthalten darf.\n\n```{r}\nset.seed(8675309)\nsample(x = letters, size = 5, replace = TRUE)\n```\n\nDiesmal hat R immer noch 5 zufällige Buchstaben erzeugt, aber jetzt enthält diese Menge von Buchstaben zwei Instanzen von \"k\". Denke immer daran, die Hilfedokumentation zu verwenden, um zu verstehen, welche Argumente eine Funktion benötigt.\n\n### Argumentnamen\n\nIn den obigen Beispielen haben wir die Argumentnamen in unserem Code ausgeschrieben (d.h. `x`, `size`, `replace`), dies ist jedoch nicht unbedingt notwendig. Die folgenden zwei Codezeilen würden beide das gleiche Ergebnis produzieren (obwohl jedes Mal, wenn du `sample()` ausführst, es ein leicht anderes Ergebnis produzieren wird, weil es zufällig ist, aber sie würden trotzdem gleich funktionieren):\n\n```{r argument-names, eval = FALSE}\n\nsample(x = letters, size = 5, replace = TRUE)\nsample(letters, 5, TRUE)\n\n```\n\nWichtig ist, dass R die Standardreihenfolge der Argumente verwendet, wenn du die Argumentnamen nicht ausschreibst. Das heißt, für `sample` wird angenommen, dass der erste Wert, den du eingibst, `x` ist, der zweite Wert ist `size` und der dritte Wert ist `replace`. \n\nWenn du die Argumentnamen ausschreibst, kannst du die Argumente in beliebiger Reihenfolge schreiben:\n\n```{r argument-order, eval = FALSE}\n\nsample(size = 5, replace = TRUE, x = letters)\n\n```\n\nWenn du gerade erst anfängst R zu lernen, kann es nützlich sein, die Argumentnamen auszuschreiben, da es dir helfen kann, dich zu erinnern und zu verstehen, was jeder Teil der Funktion tut. Mit zunehmenden Fähigkeiten findest du es vielleicht schneller, die Argumentnamen wegzulassen, und du wirst auch Codebeispiele online sehen, die keine Argumentnamen verwenden. Daher ist es wichtig, verstehen zu können, auf welches Argument sich jeder Teil des Codes bezieht (oder in der Hilfedokumentation nachzuschauen).\n\nIn diesem Kurs werden wir die Argumentnamen immer beim ersten Mal ausschreiben, wenn wir jede Funktion verwenden. Bei späteren Verwendungen können sie jedoch weggelassen werden.\n\n### Tab-Autovervollständigung\n\nEine sehr nützliche Funktion von R Studio ist die Tab-Autovervollständigung für Funktionen. Wenn du den Namen der Funktion schreibst und dann die Tab-Taste drückst, zeigt R Studio dir die Argumente, die die Funktion annimmt, zusammen mit einer kurzen Beschreibung. Wenn du Enter auf dem Argumentnamen drückst, wird der Name für dich ausgefüllt, genau wie die Autovervollständigung auf deinem Handy. Das ist unglaublich nützlich, wenn du gerade erst R lernst, und du solltest daran denken, diese Funktion häufig zu nutzen.\n\n```{r fig-autocomplete, echo=FALSE, fig.cap=\"Tab-Autovervollständigung\"}\n\nknitr::include_graphics(\"images/intro/autocomplete.png\")\n\n```\n\n## Objekte {#sec-objects}\n\nEin großer Teil deines Codings wird die Erstellung und Manipulation von Objekten beinhalten. Objekte enthalten Dinge. Diese Dinge können Zahlen, Wörter oder das Ergebnis von Operationen und Analysen sein. Du weist einem Objekt Inhalte zu, indem du `<-` verwendest.\n\nFühre den folgenden Code in der Konsole aus, aber ändere die Werte von `name` und `age` zu deinen eigenen Details und ändere `christmas` zu einem Feiertag oder Datum, das dir wichtig ist.\n\n```{r objects, filename = \"In der Konsole ausführen\"}\nname <- \"Emily\"\nage <- 36\ntoday <- Sys.Date()\nchristmas <- as.Date(\"2024-12-25\")\n```\n\nDu wirst sehen, dass vier Objekte jetzt im Umgebungsfenster erscheinen:\n\n* `name` ist `r glossary(\"character\")` (Text) Daten. Damit R es als Text erkennt, **muss** es in doppelte Anführungszeichen `\" \"` eingeschlossen sein.\n* `age` ist `r glossary(\"numeric\")` Daten. Damit R dies als Zahl erkennt, **darf** es **nicht** in Anführungszeichen eingeschlossen sein.\n* `today` speichert das Ergebnis der Funktion `Sys.Date()`. Diese Funktion gibt das Datum deines Computersystems zurück. Im Gegensatz zu `name` und `age`, die fest codiert sind (d.h. sie werden immer die Werte zurückgeben, die du eingibst), ändern sich die Inhalte des Objekts `today` dynamisch mit dem Datum. Das heißt, wenn du diese Funktion morgen ausführst, wird sie das Datum auf das morgige Datum aktualisieren.\n* `christmas` ist auch ein Datum, aber es ist als spezifisches Datum fest codiert. Es ist in die Funktion `as.Date()` eingewickelt, die R anweist, die von dir bereitgestellte Zeichenkette als Datum und nicht als Text zu interpretieren.\n\n::: {.callout-note .try}\nUm den Inhalt eines Objekts auszugeben, gib den Namen des Objekts in die Konsole ein und drücke Enter. Versuche jetzt, alle vier Objekte auszugeben.\n:::\n\nSchließlich ist ein wichtiges Konzept zu verstehen, dass Objekte interagieren können und du die Ergebnisse dieser Interaktionen in neuen Objekten speichern kannst. Bearbeite und führe den folgenden Code aus, um diese neuen Objekte zu erstellen, und gib dann den Inhalt jedes neuen Objekts aus.\n\n```{r intro-objects, filename = \"In der Konsole ausführen\"}\ndecade <- age + 10\nfull_name <- paste(name, \"Nordmann\")\nhow_long <- christmas - today\n```\n\n\n## Hilfe bekommen {#sec-help}\n\nDu wirst das Gefühl haben, dass du *viel* Hilfe brauchst, wenn du anfängst zu lernen. Das wird nicht wirklich weggehen; es ist unmöglich, sich alles zu merken. Das Ziel ist, genug über die Struktur von R zu lernen, dass du Dinge schnell nachschlagen kannst. Deshalb werden wir spezialisiertes Fachjargon im Glossar für jedes Kapitel einführen; es ist einfacher, \"convert `r glossary(\"character\")` to `r glossary(\"numeric\")` in R\" zu googeln als \"make numbers in quotes be actual numbers not words\". Zusätzlich zur oben beschriebenen Funktionshilfe gibt es hier einige zusätzliche Ressourcen, die du oft nutzen solltest.\n\n### Paket-Referenzhandbücher\n\nStarte die Hilfe in einem Browser, indem du `help.start()` in die Konsole eingibst. Klicke auf <if>Packages</if> unter <if>Reference</if>, um eine Liste der Pakete zu sehen. Scrolle zum Paket <pkg>readxl</pkg> und klicke darauf, um eine Liste der Funktionen zu sehen, die in diesem Paket verfügbar sind.\n\n\n### Googeln\n\nWenn die Funktionshilfe nicht hilft oder du dir nicht sicher bist, welche Funktion du brauchst, versuche, deine Frage zu googeln. Es wird etwas Übung brauchen, um die richtigen Fachbegriffe in deinen Suchbegriffen zu verwenden, um das zu bekommen, was du willst. Es hilft, \"R\" oder \"tidyverse\" in den Suchtext zu setzen, oder den Namen des relevanten Pakets, wie \"ggplot2\".\n\n### KI\n\nGenerative KI-Plattformen haben eine explosionsartige Popularität erlebt, insbesondere wenn es ums Programmieren geht. Aus diesem Grund haben wir ein Begleitbuch [AITutoR](https://psyteachr.github.io/AITutoR/) erstellt, um dir zu zeigen, wie du KI verantwortungsvoll nutzen kannst, um deine Coding-Reise zu unterstützen.\n\n### Vignetten\n\nViele Pakete, besonders [tidyverse](https://www.tidyverse.org/packages/){target=\"_blank\"} Pakete, haben hilfreiche Websites mit Vignetten, die erklären, wie man ihre Funktionen verwendet. Einige der Vignetten sind auch innerhalb von R verfügbar. Du kannst auf sie von der Hilfeseite eines Pakets zugreifen oder mit der Funktion `vignette()`.\n\n```{r, eval = FALSE, filename = \"In der Konsole ausführen\"}\n# öffnet eine Liste verfügbarer Vignetten\nvignette(package = \"ggplot2\")\n\n# öffnet eine spezifische Vignette im Hilfefenster\nvignette(\"ggplot2-specs\", package = \"ggplot2\")\n```\n\n\nHier ist die Übersetzung des Glossar-Abschnitts ins Deutsche:\n\n## Glossar {#sec-glossary-intro}\n\nDas Glossar am Ende jedes Kapitels definiert gängige Fachbegriffe, denen du beim Erlernen von R begegnen könntest. Dieser spezialisierte Wortschatz kann dir helfen, effizienter zu kommunizieren und nach Lösungen für Probleme zu suchen. Die unten stehenden Begriffe verlinken zum [PsyTeachR-Glossar](https://psyteachr.github.io/glossary/), das weitere Informationen und Beispiele enthält.\n\n```{r, echo = FALSE}\nglossary_table()\n```\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"html-table-processing":"none"},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["panelize","webr"],"css":["include/psyteachr.css","include/webex.css","include/style.css"],"highlight-style":"a11y","include-after-body":["include/webex.js","include/script.js"],"output-file":"02-test.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","bibliography":["include/book.bib","include/packages.bib"],"csl":"include/apa.csl","webr":{"packages":["tidyverse"]},"theme":{"light":["flatly","include/light.scss"],"dark":["darkly","include/dark.scss"]},"code-copy":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}