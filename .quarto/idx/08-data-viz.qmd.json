{"title":"Datenvisualisierung","markdown":{"headingText":"Datenvisualisierung","headingAttr":{"id":"sec-viz","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n## link for tables: https://blog.djnavarro.net/posts/2024-06-21_table1/\n\n## Beabsichtigte Lernergebnisse {#sec-ilo-viz .unnumbered}\n\n* Kategorische und kontinuierliche Daten identifizieren können\n* Plots schichtweise mit ggplot erstellen können\n* Geeignete Plots für Daten auswählen können\n\n## Verwendete Funktionen {#functions-viz}\n\n```{r, include = FALSE}\n# Lade tidyverse-Pakete separat, damit automatische Verlinkungen in `func()` funktionieren\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(glossary)\nlibrary(knitr)\nlibrary(webexercises)\nlibrary(flipbookr)\n\n```\n\n* integriert (diese können immer verwendet werden, ohne Pakete zu laden)\n    * base:: , `as.numeric()`, `c()`, `factor()`, `mean()`, `seq()`, \n    * grDevices:: `rgb()`\n* tidyverse (alle diese können mit `library(tidyverse)` verwendet werden)\n    * readr:: `col_character()`, `col_datetime()`, `col_double()`, `col_factor()`, `col_integer()`, `cols()`, `read_csv()`\n    * lubridate:: `now()`, `today()`\n    * dplyr:: `count()`, `glimpse()`, \n    * ggplot2:: `aes()`, `coord_cartesian()`, `element_blank()`, `facet_wrap()`, `geom_bar()`, `geom_boxplot()`, `geom_col()`, `geom_histogram()`, `geom_jitter()`, `geom_point()`, `geom_smooth()`, `ggplot()`, `ggtitle()`, `guides()`, `scale_fill_manual()`, `scale_x_continuous()`, `scale_x_date()`, `scale_x_discrete()`, `scale_y_continuous()`, `spec()`, `stat_summary()`, `theme()`, `theme_bw()`, `theme_minimal()`, `theme_set()`\n* andere (jedes Paket muss geladen werden, um diese zu verwenden)\n    * ggthemes:: `theme_gdocs()`\n    * patchwork:: `plot_layout()`\n\n\n\n```{r setup-viz, message=FALSE, verbatim=\"r setup, include=FALSE\"}\nlibrary(tidyverse) # enthält ggplot2\nlibrary(patchwork) # für mehrteilige Plots\nlibrary(ggthemes)  # für Plot-Themen\nlibrary(lubridate) # für die Manipulation von Daten\n```\n\nIn diesem Kapitel befassen wir uns mit der Datenvisualisierung mit dem Packet `ggplot2`. Laden Sie zuerst den [ggplot2-Spickzettel](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf) herunter. Bevor wir uns mit dem Erstellen von Abbildungen beschäftigen, machen wir einen kurzen Rückblick zu den verschiedenen Variablentypen. Denn für die Erstellung von Abbildungen ist es wichtig, dass man weiss, mit welchen Variablentypen man es zu tun hat. \n\n## Variablentypen\nWir gehen davon aus, dass unsere Daten bereits im `tidy` Format sind. Wie bereits besprochen heisst dies, dass jede Zeile eine Beobachtung ist, jede Spalte eine Variable und jede Zelle den Wert einer Beobachtung einer bestimmten Variable (Spalte) enthält. Die unten aufgeführte Tabelle mit Haustieren und ihren BesitzerInnen ist in einem solchen `tidy` Format. Jede Zeile ist eine Beobachtung eines Haustieres, jede Spalte ist eine Variable, und jede Zelle enthält den Wert der einer Variable eines bestimmten Haustieres. Es gibt 6 Variablen für jedes Haustier, ihren `name`, `owner`, `species`, `birthdate`, `weight` (in kg) und `rating` (auf einer 5-Punkte-Skala von \"very evil\" bis \"very good\").\n\n```{r, echo = FALSE}\npets <- tribble(\n  ~name,      ~owner,  ~species, ~birthdate,   ~weight, ~rating,\n  \"Darwin\",   \"Lisa\",  \"ferret\", \"1998-04-02\",  1.2,    \"a little evil\",\n  \"Oy\",       \"Lisa\",  \"ferret\", NA          ,  2.9,    \"very good\",\n  \"Khaleesi\", \"Emily\", \"cat\",    \"2014-10-01\",  4.5,    \"very good\",\n  \"Bernie\",   \"Phil\",  \"dog\",    \"2017-06-01\", 32.0,    \"very good\"\n) %>%\n  mutate(species = factor(species, c(\"dog\", \"cat\", \"ferret\")),\n         birthdate = as.Date(birthdate),\n         rating = factor(rating, c(\"very evil\", \n                                   \"a little evil\", \n                                   \"neutral\",\n                                   \"mostly good\", \n                                   \"very good\")))\n\npets\n```\n\nWie wir bereits besprochen haben, können Variablen entweder kontinuierlich (z.B. `weight`) oder kategorisch (z.B. `species`) sein. Beim Erstellen von Abbildungen muss man sich zuerst bewusst sein, mit was für Variablen man es zu tun hat. Denn einige Abbildungen eignen sich nur für bestimmte Variablentypen. Jede Variable hat auch einen `r glossary(\"data type\")`, wie zum Beispiel `r glossary(\"numeric\")` (Zahlen), `r glossary(\"character\")` (Text) oder `r glossary(\"logical\")` (Wahr/Falsch-Werte). Einige Plots funktionieren nur mit bestimmten Datentypen. Außerdem hat @sec-data-types mehr Details, da dieses Konzept wiederholt relevant sein wird.\n\n```{r excel-format-cells, echo = FALSE, fig.cap=\"Datentypen sind wie die Kategorien, wenn Sie Zellen in Excel formatieren.\"}\ninclude_graphics(\"images/appx/excel-format-cells.png\")\n```\n\n### Kontinuierlich\n\n`r glossary(\"Continuous\")` Variablen sind Eigenschaften, die man genau messen und in einer natürlichen Reihenfolge ordnen kann, wie zum Beispiel das Gewicht. Sie können kontinuierliche Variablen in mathematischen Operationen verwenden, wie zum Beispiel die Gesamtsumme einer Spalte von Preisen oder die durchschnittliche Anzahl von Likes in sozialen Medien pro Tag berechnen.\n\nKontinuierliche Variablen haben immer einen `r glossary(\"numeric\")` Datentyp. Sie sind entweder `r glossary(\"integer\", \"integers\")` wie `42` oder `r glossary(\"double\", \"doubles\")` wie `3.14159`. \n\n\n```{r, warning=TRUE, filename=\"Beispiel\"}\ninteger_vector <- c(1L, 2L, 4L) #\"integer\"-Vektor (der Buchstabe \"L\" teilt R mit, dass es sich um eine Ganzzahl handelt)\n\ndouble_vector <- c(1, 2, 4)\n\nclass(integer_vector)\n```\n\n### Kategorisch\n\n`r glossary(\"Categorical\")` Variablen sind Variablen, die nur eine bestimmte Anzahl an Kategorien haben (zum Beipsiel die Haustierart). Man unterscheidet dabei noch zwischen kategorialen Variablen, die keine natürliche Ordnung haben, sogenannte `nominale` Variablen `r glossary(\"nominal\")`. Die Haustierart gehört zu diesem Typ. Es gibt aber auch kategoriale Variablen, die man ordnen kann. Dies sind dann sogenante `ordinale` Variablen `r glossary(\"ordinal\")`. Aber auch hier gibt es nur eine begrenzte Anzahl Kategorien und die Abstände zwischen den verschiedenen Kategorien können oft nicht gleichgesetzt werden. Ein Beispiel dafür sind die Plätze 1 bis 3 an Sportwettkämpfen. Gold ist besser als Silber, was wiederum besser als Bronze ist. Der Abstand zwischen Gold-Silber und Silber-Bronze ist jedoch nicht identisch. Ein weiteres Beispiel für solche Variablen sind die Abstufungen auf `r glossary(\"Likert\")` Bewertungsskala. Auch wenn eine Skale die Zahlen 1-7 verwendet, um ordinale Variablen darzustellen, sollten Sie sie nicht wie kontinuierliche Variablen behandeln (obwohl dies in der Praxis oft gemacht wird...).\n\nIn R kann man kategoriale Variablen auf zwei Arten speichern. Man kann sie mit dem Datentyp `r glossary(\"character\")` oder auch `r glossary(\"string\", \"strings\")` genannt, speichern. Solche Variablen werden durch das Platzieren von Text in Anführungszeichen erstellt. Dieser Text kann Buchstaben, Satzzeichen oder sogar Zahlen enthalten. Zum Beispiel ist `\"January\"` eine Zeichenkette, aber auch `\"1\"`, wenn Sie es in Anführungszeichen setzen. Dieser Datentyp ist am besten für Variablen geeignet, die viele verschiedene Werte haben können, die Sie nicht im Voraus vorhersagen können.\n\n```{r, filename=\"character/string Variable\"}\ncategorical_string <- c(\"Lisa\", \"Emily\", \"Phil\")\n\ncategorical_string\n```\n\n\nKategoriale Daten können auch `r glossary(\"factor\", \"factors\")` sein, eine spezielle Art von Ganzzahl, die es Ihnen ermöglicht, die Kategorienamen und ihre Reihenfolge anzugeben. Dies ist nützlich, um Plots so anzuzeigen, dass die Kategorien in der von Ihnen gewünschten Reihenfolge erscheinen (ansonsten sind sie standardmäßig alphabetisch sortiert). Der Faktordatentyp ist am besten für Kategorien geeignet, die eine bestimmte Anzahl von Ebenen haben (z.B. \"Gold\", \"Silber\", \"Bronze\").\n\n\n\n\n```{r, filename=\"factor Variable\"}\ncategorical_factor <- factor(levels = c(1, 2, 3), labels = c(\"Gold\", \"Silber\", \"Bronze\"))\n\ncategorical_factor\n```\n\n\n\n\n:::{.to-webr}\n```{r}\n#| autorun: false\n1 + 1\n```\n:::\n\n\n### Daten und Zeiten\n\nDaten und Zeiten sind ein Sonderfall von Variablen. Sie können sich wie kategoriale oder kontinuierliche Variablen verhalten, und es gibt spezielle Möglichkeiten, sie zu plotten. Daten und Zeiten können schwierig zu handhaben sein, aber das [<pkg>lubridate</pkg>(https://lubridate.tidyverse.org/) Paket bietet Funktionen, um Ihnen dabei zu helfen.\n\n```{r}\n# das aktuelle Datum\nlubridate::today()\n```\n\n```{r}\n# das aktuelle Datum\nlubridate::today() -  as.Date(\"2024-01-01\")\n```\n\n```{r}\n# das aktuelle Datum und die aktuelle Uhrzeit in der GMT-Zeitzone\nlubridate::now(tzone = \"GMT\")\n```\n\nWir gehen hier nicht näher auf diesen Datentyp ein. \n\n::: {.callout-note .try}\n## Testen Sie Ihr Verständnis\n\nKehren Sie zum Haustierdatensatz zurück, welcher Variablentyp ist in jeder Spalte? Sie können die Funktion `glimpse()` verwenden, um eine Liste der Spaltennamen, ihrer Datentypen und der ersten Werte in jeder Spalte anzuzeigen - hier ist die Ausgabe von `glimpse()` auf dem Haustierdatensatz.\n\n```{r}\nglimpse(pets)\n```\n\n\n```{r, include = FALSE}\nnum <- c(answer = \"numeric\", x = \"character\", x = \"factor\", x = \"date\")\nchr <- c(x = \"numeric\", answer = \"character\", x = \"factor\",  x = \"date\")\nfctr <- c(x = \"numeric\", x = \"character\", answer = \"factor\", x = \"date\")\ndate <- c(x = \"numeric\", x = \"character\", x = \"factor\", answer = \"date\")\n\ncont <- c(answer = \"continuous\", x = \"nominal\", x = \"ordinal\", x = \"date\")\nnom <- c(x = \"continuous\", answer = \"nominal\", x = \"ordinal\", x = \"date\")\nord <- c(x = \"continuous\", x = \"nominal\", answer = \"ordinal\", x = \"date\")\ndate <- c(x = \"continuous\", x = \"nominal\", x = \"ordinal\", answer = \"date\")\n```\n\n| Spalte      | Variablentyp | Datentyp     |\n|:------------|:--------------|:--------------|\n| `name`      | `r mcq(nom)`  | `r mcq(chr)`  |\n| `owner`     | `r mcq(nom)`  | `r mcq(chr)`  |\n| `species`   | `r mcq(nom)`  | `r mcq(fctr)` |\n| `birthdate` | `r mcq(date)` | `r mcq(date)` |\n| `weight`    | `r mcq(cont)` | `r mcq(num)`  |\n| `rating`    | `r mcq(ord)`  | `r mcq(fctr)` |\n\n:::\n\n\n\n## Erstellen von Plots\n\n```{r sim-survey, include = FALSE, eval = FALSE}\n# Code für die Simulation der in diesem Kapitel verwendeten Daten\n# für Studenten verborgen und nicht bei jedem Stricken ausgeführt, nur hier zur Referenz\nlibrary(faux)\nset.seed(8765309)\n\nissues <- c(\n  tech = 0, \n  sales = 2, \n  returns = 1,\n  other = 1\n)\n\nsurvey_data <- add_random(employee_id = 10) %>%\n  add_random(caller_id = sample(50:100, 10), \n             .nested_in = \"employee_id\") %>%\n  add_between(\"caller_id\", issue_category = names(issues), \n              .prob = c(.4, .1, .3, .1)) %>%\n  add_ranef(\"caller_id\", \n            wait_time = 1, \n            call_time = 1, \n            .cors = 0.5) %>%\n  add_ranef(\"employee_id\", \n            employee_quality = 1, \n            employee_time = 1, \n            .cors = -.5) %>%\n  mutate(caller_id = gsub(\"caller_id\", \"C\", caller_id),\n         employee_id = gsub(\"employee_id\", \"E\", employee_id)) %>%\n  add_ranef(error = 1) %>%\n  mutate(call_start = runif(nrow(.), 2020, 2021) %>% date_decimal()) %>%\n  mutate(wait_time = norm2beta(wait_time, 2, 4, ncp=10) * 5,\n         call_time = norm2beta(call_time + employee_time, 2, 4, ncp=0) * 2 + 0.1,\n         # rundet ab und fügt Ausreißer hinzu\n         wait_time = round(wait_time * 60) + \n           sample(c(0, 100), nrow(.), T, c(99, 1)),\n         call_time = round(call_time * 60) + \n           sample(c(0, 100), nrow(.), T, c(99, 1))\n  ) %>%\n  mutate(satisfaction = (employee_quality + \n           recode(issue_category, !!!issues) -\n           (wait_time * .1) +\n           (month(call_start) * -.05) +\n           error) %>% norm2likert(prob = c(1,3,4,5,2))) %>%\n  select(caller_id, employee_id, call_start, wait_time, call_time,\n         issue_category, satisfaction)\n\nwrite_csv(survey_data, \"data/survey_data.csv\")\n```\n\nEs gibt mehrere Ansätze zur Datenvisualisierung in R; in diesem Kurs werden wir das beliebte Paket <pkg>ggplot2</pkg> verwenden, das Teil der größeren `tidyverse`-Sammlung von Paketen ist. Eine Grammatik der Grafiken (das \"gg\" in \"ggplot\") ist eine standardisierte Art, die Komponenten einer Grafik zu beschreiben. <pkg>ggplot2</pkg> verwendet eine geschichtete Grammatik der Grafiken, bei der Plots in einer Reihe von Schichten (\"layers\") aufgebaut werden. Es kann hilfreich sein, sich jeden Plot als mehrere Elemente vorzustellen, die halbtransparent übereinander liegen. \n\n@fig-layers zeigt die Entwicklung eines einfachen Streudiagramms mit diesem geschichteten Ansatz. Zuerst wird der Plot-Raum erstellt (Schicht 1); die Variablen werden angegeben (Schicht 2); die Art der Visualisierung (bekannt als `geom`), die für diese Variablen gewünscht wird, wird angegeben (Schicht 3) - in diesem Fall wird `geom_point()` aufgerufen, um einzelne Datenpunkte zu visualisieren; ein zweites Geom wird hinzugefügt, um eine Linie der besten Anpassung einzusch\n\nließen (Schicht 4), die Achsenbeschriftungen werden für eine bessere Lesbarkeit bearbeitet (Schicht 5), und schließlich wird ein Thema angewendet, um das Gesamterscheinungsbild des Plots zu ändern (Schicht 6).\n\n```{r fig-layers, fig.cap=\"Evolution eines geschichteten Plots\", echo = FALSE, message=FALSE}\nsurvey_data <- read_csv(file = \"data/survey_data.csv\",\n                        show_col_types = FALSE)\n\nx_breaks <- seq(from = 0, to = 600, by = 60)\ny_breaks <- seq(from = 0, to = 600, by = 30)\n\na <- ggplot() + labs(subtitle = \"Schicht 1\")\nb <- ggplot(survey_data, aes(x = wait_time, y = call_time)) + \n  labs(subtitle = \"Schicht 2\")\nc <- b + geom_point(alpha = 0.2, color = \"dodgerblue\") + \n  labs(subtitle = \"Schicht 3\")\nd <- c + geom_smooth(method = \"lm\", color = rgb(0, .5, .8)) + \n  labs(subtitle = \"Schicht 4\")\ne <- d + scale_x_continuous(name = \"Wartezeit (Sekunden)\", breaks = x_breaks) +\n  scale_y_continuous(name = \"Anrufzeit (Sekunden)\", breaks = y_breaks) + \n  coord_cartesian(xlim = c(0, 360), ylim = c(0, 180)) +\n  labs(subtitle = \"Schicht 5\")\nf <- e + ggthemes::theme_gdocs(base_size = 10) + \n  theme(axis.line.x = element_blank(),\n        plot.background = element_blank()) +\n  labs(subtitle = \"Schicht 6\") +\n  theme(plot.subtitle =  element_text(color = \"black\"))\n\na + b + c + d + e + f + plot_layout(nrow = 2)\n```\n\nJede Schicht ist unabhängig und individuell anpassbar. Beispielsweise können die Größe, Farbe und Position jeder Komponente angepasst werden, oder man könnte beispielsweise das erste Geom (die Datenpunkte) entfernen, um nur die Linie der besten Anpassung zu visualisieren, indem man einfach die Schicht entfernt, die die Datenpunkte zeichnet (@fig-remove-layer). Die Verwendung von Schichten erleichtert den schrittweisen Aufbau komplexer Plots und die Anpassung oder Erweiterung von Plots aus vorhandenem Code.\n\n\n```{r fig-remove-layer, fig.cap=\"Endplot mit entfernter Streudiagramm-Schicht.\", echo = FALSE}\n\nggplot(survey_data, aes(x = wait_time, y = call_time)) + \n  #geom_point(alpha = 0.15, color = \"dodgerblue\") +\n  geom_smooth(method = \"lm\", formula = y~x, color = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wartezeit (Sekunden)\", breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Anrufzeit (Sekunden)\", breaks = seq(from = 0, to = 600, by = 30)) + \n  coord_cartesian(xlim = c(0, 360), ylim = c(0, 180)) +\n  ggthemes::theme_gdocs(base_size = 11) +\n  theme(axis.line.x = element_blank(),\n        plot.background = element_blank())\n```\n\n### Plotdaten laden {#sec-plots-loading-data}\nUm ein Gefühl für 'ggplot' zu bekommen, werden wir den obigen Plot Schritt-für-Schritt zusammen nachbauen. Als erstes laden wir die Daten:\n\n```{r}\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n```\n\n`read_csv()` zeigt uns direkt, wie viele Zeilen uns Spalten die eingelsenen Daten haben und mit welchem Datentyp die Zeilen gespeichert wurden (\"Column specification\"). \n\nBei diesen Daten handelt es sich um simulierte Daten einer Kundenzufriedenheitsumfrage eines Callcenters. Bevor wir die Daten plotten, müssen wir uns mit ihnen vertraut machen. Was genau enthalten die Daten? Hier repräsentiert jede Zeile einen Anruf an das Zentrum.\n\n* `caller_id` ist eine einzigartige ID für jeden Anrufer\n* `employee_id` ist eine einzigartige ID für jeden Mitarbeiter, der Anrufe entgegennimmt\n* `call_start` ist das Datum und die Uhrzeit, zu der der Anruf einging\n* `wait_time` ist die Anzahl der Sekunden, die der Anrufer warten musste\n* `call_time` ist die Anzahl der Sekunden, die der Anruf dauerte, nachdem der Mitarbeiter abgehoben hatte\n* `issue_category` ist, ob das Problem technischer Natur war, Verkauf, Rücksendungen oder anderes\n* `satisfaction` ist die Kundenzufriedenheitsbewertung auf einer Skala von 1 (sehr unzufrieden) bis 5 (sehr zufrieden)\n\nWenn man die Spaltentypen beim Einlesen nicht spezifiziert, werden Datenimportfunktionen einfach raten, um welche Typen es sich handelt, und normalerweise standardmäßig auf Double für Spalten mit Zahlen und Character für Spalten mit Buchstaben setzen. Verwenden Sie die Funktion `spec()`, um alle Spaltentypen herauszufinden und sie bei Bedarf zu bearbeiten.\n\n```{r}\nspec(survey_data)\n```\n\nLassen Sie uns `issue_category` als Faktor festlegen und die Reihenfolge der Kategorien festlegen. Standardmäßig ordnet R die Kategorien eines Faktors alphanumerisch. Oft möchte man die Reihenfolge jedoch selber festlegen. In diesen Daten macht es am meisten Sinn, die Kategorie \"other\" am Ende der Liste zu haben. Nachdem Sie die Spaltentypen aktualisiert haben, müssen Sie die Daten erneut importieren, indem Sie den `read_csv()`-Code anpassen, um das Argument `col_types` auf die neuen Spaltentypen zu setzen.\n\n::: {.callout-note}\n## Definieren Sie Objekte, bevor Sie sie verwenden\n\nDa `read_csv()` das Objekt `survey_col_types` verwenden wird, müssen Sie `survey_col_types` erstellen, bevor Sie den angepassten `read_csv()`-Code ausführen. Wenn Sie jemals Ihren Code anpassen müssen, versuchen Sie, über die Reihenfolge nachzudenken, in der der Code ausgeführt wird, wenn Sie von vorne beginnen, und stellen Sie sicher, dass er angemessen organisiert ist.\n:::\n\n```{r}\n# aktualisierte Spaltentypen\nsurvey_col_types <- cols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\")),\n  satisfaction = col_integer()\n)\n\n# Daten erneut importieren mit korrekten Spaltentypen\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\",\n                        col_types = survey_col_types)\n```\n\n\n### Plot-Setup\n\n#### Daten {#sec-plot-setup-data}\n\nJeder Plot beginnt mit der Funktion `ggplot()` und einem Datensatz. Für Übungszwecke ist es zu Beginn gut, den Plot schrittweise aufzubauen. Wie spezifizieren als ersten Schritt also nur, welche Daten für den Plot verwendet werden sollen. Dies genriert ein weisses Feld, sozusagen ein Platzhalter für den zu erschaffenden Plot. \n\n```{r fig-build-plot-setup, fig.cap = \"Ein leerer ggplot.\"}\nggplot(data = survey_data)\n```\n\n#### Mapping\n\nDas nächste `r glossary(\"argument\")` zu `ggplot()` ist das `mapping`. Dies teilt dem Plot mit, welche Spalten/Variablen in den Daten durch welche Aspekte des Plots repräsentiert werden sollen. Diese Aspekte oder \"Ästhetiken\" werden innerhalb der Funktion `aes()` aufgelistet. Dabei handelt es sich um Sachen wie die x-Achse, y-Achse, Linienfarbe, Objektfüllung oder Linienstil. \n\nIm Folgenden sagen wir ggplot durch das `mapping` Argument via die Funktion `aes`, dass die Variable `wait_time` auf der x-Achse und die Variable `call_time` auf der y-Achse abgebildet werden soll. \n\n\nLegen Sie die Argumente `x` und `y` auf die Namen der Spalten fest, die Sie auf diesen Achsen plotten möchten. Hier möchten wir die Wartezeit auf der x-Achse und die Anrufzeit auf der y-Achse plotten. Dies füllt den Plot nun mit zwei Beschrifteten Achsen. In einem nächsten Schritt werden wir den Plot mit sogenannten `geoms` füllen. \n\n```{r fig-build-plot-mapping, fig.cap = \"Ein leerer Plot mit zugeordneten x- und y-Achsen.\"}\n# den Plot mit Mapping einrichten\nggplot(\n  data = survey_data, \n  mapping = aes(x = wait_time, y = call_time)\n)\n```\n\n::: {.callout-note}\n## ggplot-Argumentnamen\n\nIm obigen Beispiel haben wir die Namen der `r glossary(\"argument\", \"arguments\")` `data` und `mapping` ausgeschrieben, aber in der Praxis lassen fast alle diese weg. Stellen Sie einfach sicher, dass Sie die Daten und das Mapping in der richtigen Reihenfolge platzieren.\n\n```{r, eval = FALSE}\nggplot(survey_data,  aes(x = wait_time, y = call_time))\n```\n:::\n\n#### Geoms\n\nNun können wir unsere Plot-Elemente schichtenweise hinzufügen. Diese Elemente werden als `r glossary(\"geom\", \"geoms\")` bezeichnet und ihre Funktionen beginnen mit `geom_`. Man fügt Schichten zum Basis-Plot, der von `ggplot()` erstellt wurde, mit einem Plus (`+`) hinzu. \n\n```{r fig-build-plot-geoms, fig.cap=\"Einen Streudiagramm mit geom_point() hinzufügen.\"}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() # Streudiagramm\n```\n\n::: {.callout-warning collapse=\"true\"}\n## Position des +\n\nEtwas ärgerlicherweise muss das Plus am Ende der vorherigen Zeile stehen, nicht am Anfang der nächsten Zeile. Wenn Sie diesen Fehler machen, wird die erste Zeile des Codes ausgeführt, um die Basisschicht zu produzieren, aber dann erhalten Sie die folgende Fehlermeldung, anstatt `geom_point()` hinzuzufügen.\n\n```{r, error = TRUE}\nggplot(survey_data, aes(x = wait_time, y = call_time))\n+ geom_point() # Streudiagramm\n```\n:::\n\n#### Mehrere Geoms\n\nEin Teil der Stärke von <pkg>ggplot2</pkg> ist, dass man mehr als ein Geom zu einem Plot hinzufügen kann, indem man einfach weitere `geom_` Teile spezifiziert. Geoms, die zuerst spezifiziert werden, werden auch zuerst angezeigt. Das kann dazu führen, dass spätere hinzugefügte Geoms früher hinzugefügte Geoms überdecken:\n\n```{r fig-build-plot-geom2-code, eval = FALSE}\n\n# Punkte zuerst\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() + # Streudiagramm\n  geom_smooth(method = lm) # Linie der besten Anpassung\n\n# Linie zuerst\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_smooth(method = lm) + # Linie der besten Anpassung\n  geom_point() # Streudiagramm\n\n```\n\n\n```{r fig-build-plot-geom2, fig.cap=\"Punkte zuerst gegen Linie zuerst.\", message = FALSE, echo  = FALSE}\npoint_first <- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() + # Streudiagramm\n  geom_smooth(method = lm) # Linie der besten Anpassung\n  \nline_first <-\n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_smooth(method = lm) + # Linie der besten Anpassung\n  geom_point() # Streudiagramm\n\n# fügt Plots zusammen in 1 Reihe\npoint_first + line_first + plot_layout(nrow = 1)\n```\n\n#### Speichern von Plots\n\nGenau wie man Zahlen und Datentabellen als Objekte speichern kann, kann man auch den durch`ggplot()` erstellten plot speichern. Der untenstehende Code produziert dieselben Plots, die wir oben erstellt haben, speichert sie aber zu Objekten namens `point_first` und `line_first`. Wenn wir nur diesen Code ausführen, werden die Plots nicht angezeigt wie zuvor. Stattdessen sehen Sie die Objektnamen im Umgebungsbereich.\n\n```{r, message = FALSE}\npoint_first <- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() + # Streudiagramm\n  geom_smooth(method = lm) # Linie der besten Anpassung\n  \nline_first <-\n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_smooth(method = lm) + # Linie der besten Anpassung\n  geom_point() # Streudiagramm\n```\n\nDiese plots sind nun also Objekte, die wir zu einem späteren Zeitpunkt wieder abrufen oder weiterbearbeiten können. \n\nUm die Plots anzuzeigen, rufen wir die Objekte beim Namen auf. Dies gibt jeden Plot separat aus.\n\n```{r, eval = FALSE}\npoint_first # ersten Plot anzeigen\nline_first # zweiten Plot anzeigen\n```\n\n#### Kombinieren von Plots\n\nEiner der Gründe, wieso wir Plots in Objekten speichern besteht darin, dass man mehrere Plots mithilfe von Funktionen aus dem `patchwork`-Paket kombinieren kann. Der untenstehende Code produziert den schon oben gesehenen Plot (Figure 8.6), indem er die beiden Plots mit `+` kombiniert und dann angibt, dass wir die Plots auf einer einzigen Reihe mit dem `nrow`-Argument in `plot_layout()` produzieren möchten.\n\n\n```{r, fig-build-plot-geom2b, fig.cap=\"Kombinieren von Plots mit patchwork.\", message = FALSE}\n# fügt Plots zusammen in 1 Reihe\npoint_first + line_first + plot_layout(nrow = 1)\n```\n\n\n::: {.callout-note .try}\n## Versuchen Sie, nrow auf 2 zu ändern\n:::\n\n\n### Anpassen von Plots\n\nEs gibt nahezu endlose Möglichkeiten, ggplots anzupassen. Wir werden hier einige der grundlegenden Anpassungen behandeln.\n\n#### Styling von Geoms\n\nWir sollten definitiv die Linie vor den Punkten platzieren, aber die Punkte sind immer noch etwas dunkel. Wenn man den allgemeinen Stil eines Geoms ändern möchten, kann man die Argumente `colour`, `alpha`, `shape`, `size` und `linetype` innerhalb der Geom-Funktion festlegen. Es gibt viele verschiedene Werte, auf die man diese einstellen kann; @sec-plotstyle gibt Details dazu. Probieren Sie verschiedene Werte unten aus und finden Sie heraus, was die `r glossary(\"default value\", \"default values\")` für `shape` und `size` sind. \n\n```{r fig-build-plot-style, fig.cap=\"Ändern von Geom-Stilen.\"}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2, # 20 % Transparenz\n             shape = 18,  # solider Diamant\n             size = 2) + \n  geom_smooth(method = lm, \n              formula = y~x, # Formel zum Zeichnen der Linie, \n              # Festlegung von Methode und Formel vermeidet eine ärgerliche Nachricht\n              colour = rgb(0, .5, .8),\n              linetype = 3) \n```\n\n::: {.callout-warning}\n## Ästhetik insgesamt versus nach Kategorie festlegen\n\nDiese Methode dient nur dazu, den Stil aller Elemente zu ändern, die mit diesem Geom erstellt wurden. Wenn Sie möchten, dass zum Beispiel Punkte je nach Ausgabekategorie unterschiedliche Farben haben, legen Sie das Argument `colour = issue_category` innerhalb der Funktion `aes()` für das Mapping fest. Sie können die verwendeten Farben mit `scale_`-Funktionen anpassen, die Sie unten und in @sec-plotstyle lernen werden).\n:::\n\n#### Achsen formatieren\n\nNun müssen wir die Achsen ordentlicher beschriften Es gibt mehrere Funktionen, mit denen man die Achsenbeschriftungen ändern kann, aber die leistungsfähigsten sind die `scale_`-Funktionen. Sie müssen eine Skalenfunktion verwenden, die zu den Daten passt, die Sie auf dieser Achse plotten, und hier wird es besonders wichtig zu wissen, mit welchem Datentyp man arbeitet. Beide Achsen hier sind `r glossary(\"continuous\")`, daher verwenden wir `scale_x_continuous()` und `scale_y_continuous()`.\n\nDas Argument `name` ändert die Achsenbeschriftung. Das Argument `breaks` legt die Haupteinheiten fest und benötigt einen `r glossary(\"vector\")` möglicher Werte, der auch über den Bereich der Daten hinausgehen kann. Die Funktion `seq()` erstellt eine Folge von Zahlen `from` einer `to` einer anderen `by` festgelegten Schritten:\n\n```{r, filename=\"Beispiel von seq()\"}\nseq(from = 0, to = 600, by = 60)\n```\n\n\n```{r fig-build-plot-axes, fig.cap=\"Formatierung von Plotachsen mit scale_-Funktionen.\"}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  # Achsenbeschriftungen und Unterbrechungen anpassen\n  scale_x_continuous(name = \"Wartezeit (Sekunden)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Anrufzeit (Sekunden)\",\n                     breaks = seq(from = 0, to = 600, by = 30))\n```\n\n::: {.callout-note .try}\n## Kleinere Unterbrechungen\n\nÜberprüfen Sie die Hilfe zu `?scale_x_continuous`, um zu sehen, wie Sie die kleineren Einheiten festlegen oder angeben würden, wie viele Unterbrechungen Sie möchten.\n:::\n\n::: {.callout-note .try}\n## Die `labs` Funktion\n\nMan kann die Achsen auch über die `labs` Funktion beschriften. Dies kann dann nützlich sein, wenn man an den Achsen sonst nichts anpassen muss:\n```{r}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  labs(x = \"Wartezeit (Sekunden)\",\n       y = \"Anrufzeit (Sekunden)\")\n```\n\n:::\n\n\n#### Achsengrenzen\n\nWenn man die minimalen und maximalen Werte auf einer Achse ändern möchte, verwendet man die Funktion `coord_cartesian()`. Viele Plots sind sinnvoller, wenn die minimalen und maximalen Werte den Bereich möglicher Werte darstellen, auch wenn diese Werte nicht in den Daten vorhanden sind. Hier können Warte- und Anrufzeiten nicht weniger als 0 Sekunden betragen, also legen wir die Minimalwerte auf 0 und die Maximalwerte auf die erste Unterbrechung über dem höchsten Wert fest.\n\n```{r fig-build-plot-limits, fig.cap=\"Ändern der Achsengrenzen.\"}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wartezeit (Sekunden)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Anrufzeit (Sekunden)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  # Achsengrenzen festlegen\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180))\n```\n\n::: {.callout-caution}\n## Grenzen mit der scale_-Funktion festlegen\n\nSie können auch das Argument `limits` innerhalb der `scale_`-Funktionen festlegen, aber dies entfernt tatsächlich alle Daten, die außerhalb dieser Grenzen liegen, anstatt Ihren Plot zu beschneiden, und dies kann das Erscheinungsbild bestimmter Plot-Typen wie Violin-Plots und Dichtegraphen ändern. Deshalb sollte die `scale_` Funktion dafür nicht verwendet werden.\n:::\n\n#### Themes {#sec-themes}\nDamit man für das ästhetische \"Finetuning\" des Plots nicht immer alle Werte selber spezifizieren muss, gibt es eine Reihe von sogenannten `Themes` die Plots in einem besetimmten Design erscheinen lassen. <pkg>ggplot2</pkg> kommt mit mehreren integrierten Themen, wie `theme_minimal()` und `theme_bw()`, aber das [<pkg>ggthemes</pkg>](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) Paket bietet noch mehr Themen, die verschiedenen Softwareprogrammen entsprechen, wie GoogleDocs, Excel oder Stata. Im folgenden wenden wir das Excel theme an und ändern die Schriftgrösse mit dem Argument `base_size`.\n\n\n```{r fig-build-plot-theme, fig.cap=\"Ändern des Themes zum Google Docs-Stil.\"}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wartezeit (Sekunden)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Anrufzeit (Sekunden)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180)) +\n  # das Theme ändern\n  ggthemes::theme_excel(base_size = 20)\n```\n\nDas Resultat ist nicht gerade ansprechend. Das steht auch ausdrücklich in der Dokumentation der Funktion `ggthemes::theme_excel`: \"Theme to replicate the ugly monstrosity that was the old gray-background Excel chart. Please never use this.\"\n\nVersuchen wir es also mit einem anderen theme:\n```{r fig-build-plot-theme-economist, fig.cap=\"Ändern des Themes zum Google Docs-Stil.\"}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wartezeit (Sekunden)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Anrufzeit (Sekunden)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180)) +\n  # das Theme ändern\n  ggthemes::theme_economist(base_size = 20)\n```\n\nDer Plot sieht mit dem Theme der Zeitschrift Economist schon deutlich besser aus. \n\n\n#### Theme-Anpassungen\n\nWenn wir mit einem Theme immer noch nicht ganz zufrieden sind, können wir es mit der Funktion `themes()` weiter anpassen. Überprüfen Sie die Hilfe für diese Funktion, um alle möglichen Optionen zu sehen (mit `?themes`, die Liste der zu ändernden Elemente ist ziemlich lang). Oft will man, anstatt ein Elment zu ändern, ein Element komplett entfernen. Dies tut man, indem man das relvante Argument auf `element_blank()` setzt. Unten entfernen wir die x-Achsenlinie und den Plot-Hintergrund:\n\n```{r fig-build-plot-custom-theme, fig.cap=\"Anpassen des Themes, um die x-Achsenlinie und den Hintergrundumriss zu entfernen.\"}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wartezeit (Sekunden)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Anrufzeit (Sekunden)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180)) +\n  theme_gdocs(base_size = 11) +\n  # Theme-Elemente anpassen\n  theme(axis.line.x = element_blank(),\n        plot.background = element_blank())\n```\n\n### Plotbeschriftungen {#sec-captions}\n\nOft möchte man Plots auch mit Titel und/oder Untertitel versehen. Dies können wir mit der bereits kennengelernten Funktion `labs` tun:\n\n```{r fig-caption, fig.cap=\"Hinzufügen eines Titels, Untertitels und einer Bildunterschrift.\"}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wartezeit (Sekunden)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Anrufzeit (Sekunden)\",\n                     breaks = seq(from = 0, to\n\n = 600, by = 30)) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180)) +\n  theme_gdocs(base_size = 11) +\n  theme(axis.line.x = element_blank(),\n        plot.background = element_blank()) +\n  labs(title = \"Die Beziehung zwischen Wartezeit und Anrufzeit\",\n       subtitle = \"Anrufdaten 2020\",\n       caption = \"Abbildung 1. Mit zunehmender Wartezeit steigt die Anrufzeit.\")\n```\n\n\n## Geeignete Plots\nDer Aufbau von Plots, wie wir ihn gerade gelernt haben, ist immer gleich. Man muss jedoch die Art des Plots den Daten(typen) anpassen, die man plotten will. Entsprechend ist dieser Abschnitt nach Datentypen strukturiert. \n\nDer [ggplot2-Spickzettel](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf) ist eine großartige Ressource die dabei hilft, Plots zu finden, die zu den Daten passen. \n\n\nDie untenstehenden Beispiele verwenden alle dieselben Kundenzufriedenheitsdaten, aber jeder Plot kommuniziert etwas anderes. \n\nEs wird nicht erwartet, dass Sie sich alle Plot-Typen oder die Methoden zur Anpassung merken, aber es wird hilfreich sein, den Code in den folgenden Beispielen selbst auszuprobieren, indem Sie Werte ändern, um Ihr Verständnis zu testen.\n\n### Kategorien zählen\n\n#### Balkendiagramm\n\nWenn Sie die Anzahl Beobachtungen pro Kategorie zählen möchten, können Sie `geom_bar()` verwenden. Sie müssen nur eine `x`-Zuordnung zu `geom_bar()` bereitstellen, denn standardmäßig verwendet `geom_bar()` die Anzahl der Beobachtungen in jeder Gruppe von `x` als Wert für `y`, sodass Sie `ggplot` nicht mitteilen müssen, was auf der y-Achse stehen soll.\n\n```{r fig-bar, fig.cap=\"Ein einfaches Balkendiagramm.\"}\nggplot(survey_data, aes(x = issue_category)) +\n  geom_bar()\n```\n\n::: {.callout-note .try}\n## Anpassen des Aussehens von Balkendiagrammen\n\nSie möchten wahrscheinlich einige Dinge anpassen, wie die Farben, die Reihenfolge der Spalten und ihre Beschriftungen. Untersuchen Sie den untenstehenden Code und versuchen Sie, ihn Schicht für Schicht auszuführen, um herauszufinden, wo sich diese Dinge ändern. Die Funktionen `scale_fill_manual()` und `scale_x_discrete()` sind neu, funktionieren aber auf die gleiche Weise wie die anderen `scale_`-Funktionen. Sie lernen mehr darüber in @sec-custom-viz.\n\n```{r custom-bar, webex.hide = \"Code\"}\n\nggplot(survey_data, aes(x = issue_category, \n                        fill = issue_category)) +\n  geom_bar() +\n  scale_x_discrete(\n    # Achsentitel ändern\n    name = \"Issue-Kategorie\", \n    # Reihenfolge ändern\n    limits = c(\"tech\", \"returns\", \"sales\", \"other\"), \n    # Beschriftungen ändern\n    labels = c(\"Technisch\", \"Rückgaben\", \"Verkäufe\", \"Andere\") \n  ) +\n  scale_fill_manual(\n    # Farben ändern\n    values = c(tech = \"goldenrod\", \n                returns = \"darkgreen\", \n                sales = \"dodgerblue3\", \n                other = \"purple3\"),\n    # die Legende entfernen\n    guide = \"none\" \n  ) +\n  scale_y_continuous(\n    name = \"\", # Achsentitel entfernen\n    # den Raum oberhalb und unterhalb der y-Achse entfernen\n    expand = expansion(add = 0)\n  ) +\n  # Minimum = 0, Maximum = 350\n  coord_cartesian(ylim = c(0, 350)) + \n  ggtitle(\"Anzahl der Probleme pro Kategorie\") # einen Titel hinzufügen\n```\n:::\n\n#### Säulendiagramm\n\nWenn Ihre Daten bereits eine Spalte mit der Anzahl enthalten, die Sie plotten möchten, können Sie `geom_col()` verwenden, um sie zu plotten. Wir können die Funktion `count()` verwenden, um eine Tabelle mit einer Zeile für jede `issue_category` und einer Spalte namens `n` mit der Anzahl der Beobachtungen in dieser Kategorie zu erstellen.\n\n```{r}\ncount_data <- count(survey_data, issue_category)\n```\n\n`r kable(count_data)`\n\nDas Mapping für `geom_col()` erfordert, dass Sie sowohl die `x`- als auch die `y`-Ästhetik festlegen. Setzen Sie `y = n`, weil wir die Anzahl der Probleme in jeder Kategorie plotten möchten, und diese Information befindet sich in der Spalte namens `n`.\n\n```{r fig-col, fig.cap=\"Ein einfaches Säulendiagramm.\"}\nggplot(count_data, aes(x = issue_category, y = n)) +\n  geom_col()\n```\n\n\n#### Tortendiagramm\n\nTortendiagramme sind eine [irreführende Form der Datenvisualisierung](https://www.data-to-viz.com/caveat/pie.html){target=\"_blank\"}, daher werden wir sie nicht behandeln. Wir werden andere Methoden behandeln, die sich besser für die Visualisierung von Anteilen handeln. \n\n\n::: {.callout-note .try}\n## Testen Sie Ihr Verständnis\n\n```{r, include = FALSE}\nbar <- c(answer = \"geom_bar\", x = \"geom_col\")\ncol <- c(x = \"geom_bar\", answer = \"geom_col\")\n```\n\n\nHier ist eine kleine Datentabelle.\n\ncountry             | population      | island\n:-------------------|----------------:|:--------------\nNordirland    | 1,895,510       | Irland\nWales               | 3,169,586       | Großbritannien\nRepublik Irland | 4,937,786       | Irland\nSchottland            | 5,466,000       | Großbritannien\nEngland             | 56,550,138      | Großbritannien\n\n\n* Welches Geom würden Sie verwenden, um die Bevölkerung für jedes der 5 Länder zu plotten? `r mcq(col)`\n```{r test-counting-categories, echo = FALSE, results='asis'}\nopt <- c(answer = \"aes(x = country, y = population)\",\n         x = \"aes(x = population, y = country)\",\n         x = \"aes(x = country)\",\n         x = \"aes(x = island)\",\n         x = \"aes(y = population)\")\ncat(\"* Welches Mapping würden Sie verwenden? \", longmcq(opt))\n```\n* Welches Geom würden Sie verwenden, um die Anzahl der Länder auf jeder Insel zu plotten? `r mcq(bar)`\n```{r, echo = FALSE, results='asis'}\nopt <- c(x = \"aes(x = country, y = population)\",\n         x = \"aes(x = population, y = country)\",\n         x = \"aes(x = country)\",\n         answer = \"aes(x = island)\",\n         x = \"aes(y = population)\")\ncat(\"* Welches Mapping würden Sie verwenden? \", longmcq(opt))\n```\n:::\n\n### Plots mit einer kontinuierlichen Variable {#sec-histogram}\n\nWenn Sie eine kontinuierliche Variable haben, wie die Anzahl der Sekunden, die Anrufer warten mussten, können Sie `geom_histogram()` verwenden, um die Verteilung der Variable zu visualisieren. Genau wie bei `geom_bar()` muss man dabei nur die `x`-Variable angeben. \n\nEin Histogramm teilt die Daten in \"Bins\" entlang der x-Achse auf und zeigt die Anzahl der Beobachtungen in jedem Bin entlang der y-Achse.\n\n```{r fig-histogram, fig.cap=\"Histogramm der Wartezeiten.\"}\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram()\n```\n\nSie sollten immer die `binwidth` oder die Anzahl der `bins` auf etwas Sinnvolles für Ihre Daten festlegen (wie per Mitteilung angegeben ist der Default 30 `bins`, was mehr oder meist weniger sinnvoll sein kann). Sie müssen möglicherweise einige Optionen ausprobieren, bevor Sie etwas finden, das gut aussieht und die Verteilung der Variable gut darstellt -- versuchen Sie, die Werte von `binwidth` und `bins` unten zu ändern, um zu sehen, was am besten funktioniert.\n\n```{r eval = FALSE}\n# Breite jeder Leiste anpassen\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(binwidth = 30)\n\n# Anzahl der Leisten anpassen\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(bins = 5)\n```\n\n\nStandardmäßig beginnen die Balken *zentriert* auf 0, also wenn `binwidth` auf 30 eingestellt ist, würde der erste Balken -15 bis 15 Sekunden umfassen, was keinen Sinn macht. Wir können `boundary = 0` setzen, damit jeder Balken 30-Sekunden-Inkremente *ab* 0 darstellt. \n\n```{r fig-histogram-boundary0, fig.cap=\"Ein Histogramm mit der Grenze auf 0 gesetzt.\"}\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(binwidth = 30, boundary = 0)\n```\n\n\nSchließlich ist der Standardstil von grauen Balken hässlich, also können Sie das ändern, indem Sie `fill` und `colour` festlegen, sowie `scale_x_continuous()` verwenden, um die Achsenbeschriftungen zu aktualisieren. \n\n```{r fig-histogram-custom, fig.cap=\"Histogramm mit benutzerdefinierten Stilen.\"}\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(binwidth = 15, \n                 boundary = 0, \n                 fill = \"white\", \n                 color = \"black\") +\n  scale_x_continuous(name = \"Wartezeit (Sekunden)\",\n                     breaks = seq(0, 600, 60))\n```\n\n::: {.callout-note .try}\n## Testen Sie Ihr Verständnis\n\nStellen Sie sich vor, Sie haben eine Tabelle mit der [Bevölkerung für jedes Land der Welt](https://population.un.org/wpp/Download/Standard/Population/){target=\"_blank\"} mit den Spalten `country` und `population`. Wir werden uns nur die 76 Länder mit Bevölkerungen unter einer Million ansehen.\n\n```{r test-one-continuous, echo = FALSE}\n# Daten laden\npop_data <- readxl::read_excel(\"data/WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES.xlsx\", skip = 16) %>%\n  filter(Type == \"Country/Area\") %>%\n  select(country = 3, population = `2020`) %>%\n  mutate(population = round(as.numeric(population) * 1000)) %>%\n  filter(population < 1e6)\n  \n# Plots erstellen\nggplot(pop_data, aes(x = population)) +\n  scale_x_continuous(breaks = seq(0, 1e6, 1e5),\n                     labels = c(paste0(0:9*100, \"K\"), \"1M\")) +\n  scale_y_continuous(name = \"Anzahl der Länder\") + \n  geom_histogram(binwidth = 1e5, boundary = 0, fill = \"white\", color = \"black\")\n```\n\n\n```{r, echo = FALSE, results='asis'}\nopts <- c(x = \"aes(x = country, y = population)\",\n          x = \"aes(x = population, y = country)\",\n          answer = \"aes(x = population)\",\n          x = \"aes(x = population, y = count)\")\ncat(\"* Wie würden Sie das Mapping für diesen Plot festlegen? \", longmcq(opts))\n```\n* Was ist die `binwidth` des Histogramms? `r mcq(c(\"1\", \"100\", answer = \"100K\", \"1M\"))`\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Anpassung der Achsenbeschriftung\n\nWenn Sie neugierig sind, wie wir die x-Achsenbeschriftungen auf \"100K\" anstelle von \"100000\" eingestellt haben, müssen Sie nur einen Vektor von `labels` derselben Länge wie `breaks` hinzufügen.\n\n```{r, eval = FALSE}\n  scale_x_continuous(breaks = seq(0, 1e6, 1e5),\n                     labels = c(paste0(0:9*100, \"K\"), \"1M\"))\n```\n:::\n\n### Gruppierte kontinuierliche Variablen\n\nEs gibt mehrere Möglichkeiten, kontinuierliche Daten über Gruppen hinweg zu vergleichen. Welche Sie wählen, hängt davon ab, was sie mit dem Plot zeigen möchten. \n\n#### Gestapeltes Histogramm\n\nIn vorherigen Plots haben wir `fill` rein aus optischen Gründen verwendet, z. B. haben wir die Farbe der Histogrammbalken geändert, um sie schöner zu machen. Sie können jedoch auch `fill` verwenden, um eine andere Variable darzustellen, so dass die Farben bedeutungsvoll werden. \n\nDas Festlegen der `fill`-Ästhetik **im Mapping** erzeugt unterschiedlich gefärbte Balken für jede Kategorie der `fill`-Variablen, in diesem Fall `issue_category`. Somit sehen wir die Verteilung der Wartezeit für jede `issue_category`. Dadurch lassen sich gut Unterschiede in den Wartezeiten zwischen den `issue_category` Kategorien erkennen. \n\n```{r, fig.cap=\"Histogramm mit Kategorien, die durch Füllung dargestellt werden.\"}\nggplot(survey_data, aes(x = wait_time, fill = issue_category)) +\n  geom_histogram(boundary = 0, \n                 binwidth = 15,\n                 color = \"black\")\n```\n\n\n::: {.callout-warning}\n## Argumente innerhalb von aes()\n\nWenn Sie einen Aspekt festlegen, um die Daten darzustellen, tun Sie dies innerhalb der Funktion `aes()` für das Mapping, nicht als Argument zum Geom. Wenn Sie versuchen, dies in einem Geom zu setzen, erhalten Sie die folgende Fehlermeldung (es sei denn, Sie haben zufällig ein Objekt namens `issue_category`, das ein Farbwort ist).\n\n```{r, error = TRUE}\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(boundary = 0, \n                 binwidth = 15, \n                 color = \"black\",\n                 fill = issue_category)\n```\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Alternative zum Histogramm\n\nDie Funktion `geom_area()` gibt einen ähnlichen Effekt, wenn `stat = \"bin\"`. \n\n```{r, fig.cap=\"Gestapeltes Flächendiagramm.\"}\n# Flächendiagramm\nggplot(survey_data, mapping = aes(x = wait_time, fill = issue_category)) +\n  geom_area(stat = \"bin\", \n            boundary = 0, \n            binwidth = 15, \n            color = \"black\")\n```\n\n:::\n\n#### Ausgewürfeltes Histogramm\n\nStandardmäßig werden die Kategorien übereinander gestapelt positioniert. Wenn Sie mehr als eine Verteilung vergleichen möchten, können Sie das Argument `position` von `geom_histogram()` auf \"dodge\" setzen, um die Balken für jede Gruppe nebeneinander statt übereinander zu platzieren. Dies kann jedoch mit mehreren Kategorien verwirrend aussehen. \n\n```{r fig-histogram-dodge, fig.cap = \"Ein Histogramm mit mehreren Gruppen.\"}\n\n# ausgewürfeltes Histogramm\nggplot(survey_data, aes(x = wait_time, \n                        fill = issue_category,\n                        colour = issue_category))+\n  geom_histogram(boundary = 0, \n                 binwidth = 15, \n                 position = \"dodge\") +\n  scale_x_continuous(name = \"Wartezeit (Sekunden)\",\n                     breaks = seq(0, 600, 60))\n```\n\n\n::: {.callout-tip collapse=\"true\"}\n## Alternative zum Häufigkeitsplot\n\nAlternativ können Sie `geom_freqpoly()` verwenden, um eine Linie zu zeichnen, die die Oberseite jedes Bins verbindet (siehe @sec-freqpoly).\n\n```{r fig-groups-freqpoly, fig.cap = \"Ein Häufigkeitsplot mit mehreren Gruppen.\"}\n# Häufigkeitsplot\nggplot(survey_data, aes(x = wait_time,\n                        colour = issue_category)) +\n  geom_freqpoly(binwidth = 15, \n                boundary = 0,\n                size = 1) +\n  scale_x_continuous(name = \"Wartezeit (Sekunden)\",\n                     breaks = seq(0, 600, 60))\n```\n\n:::\n\n\n#### Boxplot\n\nEine weitere Möglichkeit, Gruppen von kontinuierlichen Variablen zu vergleichen, sind Boxplots. Sie zeigen nicht die Form der Verteilung, sondern visualisieren einige aussagekräftige Statistiken darüber. Die mittlere Linie stellt den `r glossary(\"median\")` dar; die Hälfte der Daten/Beobachtungen liegt über dieser Linie und die Hälfte darunter. Die Box umschließt das 25. bis 75. Perzentil der Daten, also fallen 50% der Daten in die Box. Die \"Whisker\", die ober- und unterhalb der Box herausragen, erstrecken sich 1,5-mal so hoch wie die Box, obwohl Sie dies mit dem Argument `coef` ändern können. Die Punkte zeigen `r glossary(\"outlier\", \"outliers\")` -- einzelne Datenpunkte, die außerhalb dieses Bereichs liegen.\n\nBoxplots können horizontal sein, wenn Sie die x- und y-Spalten tauschen, und es gibt viele andere Anpassungen, die Sie anwenden können.\n\n```{r fig-box-plot, fig.width = 8, fig.height = 2.5, fig.cap = \"Boxplots.\"}\nboxplot <- ggplot(survey_data, aes(x = issue_category, y = wait_time)) +\n geom_boxplot() +\n  ggtitle(\"Standard-Vertikal-Boxplot\")\n\ncustom <- ggplot(survey_data, aes(y = issue_category,x = wait_time)) +\n geom_boxplot(fill = \"grey80\", \n              outlier.colour = \"red\",\n              outlier.shape = 8,\n              coef = 1,   # Länge der Whisker relativ zur Box\n              varwidth = TRUE, # Breite proportional zur Stichprobengröße setzen\n              notch = TRUE) +\n  ggtitle(\"Angepasster Horizontal-Boxplot\")\n\nboxplot + custom\n```\n\n\n::: {.callout-caution collapse=\"true\"}\n## Irreführende Balkendiagramme\nHäufig werden anstatt Verteilungen, wie zum Beispiel mit dem Boxplot, nur einzelne Statistiken, zum Beispiel der Mittelwert, geplottet. Dies kann sehr irreführend sein, da es die Verteilung der Rohwerte nicht veranschaulicht und die Unterschiede deshalb grösser aussehen können, als sie tatsächlich sind. So sehen die Unterschiede in den Mittelwerten im Plot unten links deutlich dramatischer aus, als dies aus den Daten eigentlich hervorgeht (vgl. Boxplot oben). \n\nDer Effekt sieht aber nur so dramatisch aus, weil die x-Achse nicht bei 0 beginnt. Plotten wir den gesamten Range der Daten (rechter plot) sehen wir, dass es fast keine Unterschiede gibt. Achten sie immer darauf, was sie mit einer Abbildung aussagen möchten. Und wie man sieht, kann man den plot entsprechend der gewünschten Aussage wählen. Später werden wir sehen, wie mann solche Plots mit Massen wie Konfidenzintervallen ergänzen kann, um dem etwas entgegenzuwirken. \n\n```{r fig-col-plot-bad, fig.height = 2.5, fig.width = 8, message=FALSE, echo = FALSE, fig.cap=\"Plotten Sie kontinuierliche Daten nicht mit Säulendiagrammen. Sie sind nur für Zähldaten geeignet.\"}\ntall_col <- ggplot(survey_data, aes(x = issue_category, \n                                    y = wait_time,\n                                    fill = issue_category)) +\n  scale_x_discrete(name = \"Issue-Kategorie\") +\n  scale_y_continuous(name = \"Wartezeit (Sekunden)\",\n                     breaks = seq(0, 600, 60)) +\n  guides(fill = \"none\", colour = \"none\") +\n  stat_summary(fun = \"mean\", \n               geom = \"col\") # zeichnet eine Säule, die den Mittelwert darstellt\n\nshort_col <- tall_col +\n  scale_y_continuous(name = \"Wartezeit (Sekunden)\",\n                     breaks = seq(0, 600, 1)) +\n  coord_cartesian(ylim = c(185, 189))\n\nshort_col + tall_col \n```\n\n\n:::\n\n::: {.callout-note .try}\n## Testen Sie Ihr Verständnis\n\n```{r test-grouped-continuous, echo=FALSE, fig.height = 2.5}\nbox <- c(x = \"geom_box()\",\n         answer = \"geom_boxplot()\",\n         x = \"geom_violin()\",\n         x = \"geom_violinplot()\")\n\nmedian <- c(x = \"mean\",\n            answer = \"median\",\n            x = \"mode\")\n\ne04 <- setNames(faux::make_id(10, \"e\", 2), rep(\"x\", 10))\ne07 <- e04\nnames(e04)[4] <- \"answer\"\nnames(e07)[7] <- \"answer\"\n\naes <- sample(c(\n  answer = \"aes(x = employee_id, y = call_time, fill = employee_id)\",\n  x = \"aes(x = employee_id, y = call_time, fill = call_time)\",\n  x = \"aes(x = employee_id, y = call_time, colour = call_time)\",\n  x = \"aes(x = employee_id, y = call_time, colour = employee_id)\"\n))\n\ng <- ggplot(survey_data, aes(x = employee_id, y = call_time, fill = employee_id)) +\n  guides(fill = \"none\")\n  \nv <- g + geom_violin(draw_quantiles = 0.5)\nb <- g + geom_boxplot()\n\n b \n```\n\n* Wie würden Sie den Plot erstellen? `r mcq(box)`\n* Wie sieht das Mapping für den Plot aus? `r longmcq(aes)`\n* Welcher Mitarbeiter hat die längste mediane Anrufzeit? `r mcq(e04)`\n* Welcher Mitarbeiter hat die längste Anrufzeit? `r mcq(e07)`\n:::\n\n\n### Zwei kontinuierliche Variablen\n\nWenn Sie sehen möchten, wie zwei kontinuierliche Variablen zusammenhängen, legen Sie eine als x-Achse und die andere als y-Achse fest. Normalerweise, wenn eine Variable die andere verursacht, plotten Sie die Ursache auf der x-Achse und die Wirkung auf der y-Achse. Hier möchten wir sehen, ob längere Wartezeiten dazu führen, dass die Anrufe länger dauern. \n\n#### Streudiagramm\n\nDie Funktion zur Erstellung eines Streudiagramms heißt `geom_point()`.\n\n```{r fig-demo-point, fig.cap=\"Streudiagramm mit geom_point().\"}\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point()\n```\n\n#### Trendlinien\n\nIn @fig-layers haben wir die Beziehung zwischen Wartezeit und Anrufzeit mit einer Trendlinie betont, die durch `geom_smooth()` mit dem Argument `method = lm` erstellt wurde (\"lm\" steht für \"lineares Modell\", also die Trendlinie einer linearen Regression). Sie können auch `method = loess` einstellen, um eine nichtlineare Beziehung zu visualisieren.\n\n```{r fig-2-continuous, fig.cap=\"Verschiedene Möglichkeiten, die Beziehung zwischen zwei kontinuierlichen Variablen zu zeigen.\"}\n\nlm_plot <- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = lm, formula = y~x) +\n  ggtitle(\"method = lm\")\n\nloess_plot <- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = loess, formula = y~x) +\n  ggtitle(\"method = loess\")\n\nlm_plot + loess_plot\n```\n\n::: {.callout-warning}\n## Fehler-Schattierung\n\nWenn es nicht viele Daten an den Extremen der x-Achse gibt, kann die Kurve sehr unsicher sein. Dies wird durch den breiteren schattierten Bereich dargestellt, was bedeutet, dass die wahre Beziehung irgendwo innerhalb dieses Bereichs liegen könnte. Fügen Sie das Argument `se = FALSE` zu `geom_smooth()` hinzu, um diese \"Standardfehler\"-Schattierung zu entfernen.\n:::\n\n\n#### Daten\n\nDie Spalte `call_start` enthält sowohl ein Datum als auch eine Uhrzeit, also verwenden wir die Funktion `date()` aus <pkg>lubridate</pkg>, um sie nur in ein Datum zu konvertieren. Wir benötigen es in diesem Format, um die x-Achse unten transformieren zu können.\n\n```{r fig-date-x, fig.cap=\"Plotting dates.\"}\nggplot(survey_data, aes(x = lubridate::date(call_start), \n                        y = satisfaction)) + \n  geom_smooth(method = lm, formula = y~x)\n```\n\nWir können `scale_x_date()` verwenden, um die `date_breaks` auf \"1 Monat\" Abstand einzustellen. Das Argument `date_labels` verwendet einen Code für verschiedene Datumsformate; Sie können die vollständige Liste der Möglichkeiten in der Hilfe für `?strptime` sehen. Zum Beispiel bedeutet `%b` \"Abgekürzter Monatsname\", während Sie für ein Format wie \"2020/01/31\" `\"%Y/%m/%d\"` ausprobieren könnten.\n\n```{r fig-date-month, fig.cap=\"Plotting dates with breaks one month apart.\"}\nggplot(survey_data, aes(x = lubridate::date(call_start), \n                        y = satisfaction)) +\n  geom_smooth(method = lm, formula = y~x) +\n  scale_x_date(name = \"\",\n               date_breaks = \"1 month\", \n               date_labels = \"%b\") +\n  scale_y_continuous(name = \"Kundenzufriedenheit\") +\n  ggtitle(\"Kundenzufriedenheit 2020\")\n```\n\n::: {.callout-note .try}\n## Testen Sie sich selbst\n\nEs sieht so aus, als würde die Kundenzufriedenheit im Laufe des Jahres abnehmen, aber ist diese Änderung bedeutend? Sehen Sie, wie der Plot aussieht, wenn die y-Achse den vollen Bereich möglicher Zufriedenheitswerte von 1 bis 5 umfasst. Sie können auch die einzelnen Datenpunkte plotten, um den Bereich der Werte zu betonen. \n\n```{r, webex.hide = TRUE}\nggplot(survey_data, aes(x = lubridate::date(call_start), \n                        y = satisfaction)) +\n  # einzelne Daten anzeigen, die Höhe leicht versetzen, um Überlappungen zu vermeiden\n  geom_jitter(width = 0, height = .1, alpha = 0.2) + \n  geom_smooth(method = lm,  formula = y~x) +\n  scale_x_date(name = \"\",\n               date_breaks = \"1 month\", \n               date_labels = \"%b\") +\n  scale_y_continuous(name = \"Kundenzufriedenheit\",\n                     breaks = 1:5) +\n  coord_cartesian(ylim = c(1, 5)) + # Grenzen ändern\n  ggtitle(\"Kundenzufriedenheit 2020\")\n```\n\n::: \n\n### Überlagerung\n\nWenn Sie einen begrenzten Bereich numerischer Werte haben, wie z.B. eine ordinale Bewertungsskala, könnnen manchmal überlappende Daten das Verständnis eines Punktdiagramms erschweren. Zum Beispiel zeigt der folgende Plot Zufriedenheitsbewertungen nach Anrufzeit, aber weil alle Bewertungen 1, 2, 3, 4 oder 5 sind, ist es schwer zu sehen, wie viele Datenpunkte an jedem Punkt sind.\n\nIn diesem Abschnitt werden wir einige Optionen zur Bewältigung des Überlagerungsproblems erkunden.\n\n```{r fig-over-plot, fig.cap=\"Überlappende Daten erschweren das Verständnis von Plots.\"}\nggplot(survey_data, aes(x = call_time, y = satisfaction)) + \n  geom_point()\n```\n\n#### Jitter-Diagramm\n\nSie können `geom_jitter()` verwenden, um die Punkte etwas zu verschieben, um sie besser sichtbar zu machen. Hier ist die x-Achse kontinuierlich, daher besteht keine Notwendigkeit, die `width` zu jittern, aber die y-Achse sind ordinale Kategorien, daher wird die `height` zwischen -0,2 und +0,2 vom wahren y-Wert gejittert. Eine andere oder weitere Möglichkeit ist es, die Punkte etwas transparent zu machen. \n\n::: {.callout-note .try}\n## Ändern Sie diese Werte, um zu verstehen, was Jitter tut\n:::\n\n```{r fig-jitter-plot, fig.cap = \"Jitter-Diagramm.\"}\nggplot(survey_data, aes(x = call_time, y = satisfaction)) +\n  geom_jitter(width = 0, height = .2, alpha = 0.5)\n```\n\n#### Facetten\n\nAlternativ können wir `facet_wrap()` verwenden, um für jede Zufriedenheitsstufe ein separates Diagramm zu erstellen. `facet_wrap()` verwendet das Tilde (~) Symbol, das Sie grob als \"nach\" übersetzen können, z.B. facettiere das Diagramm *nach* Zufriedenheitsbewertung. Die `labeller`-Funktion steuert die Beschriftungen über jedem Plot. `label_both` gibt an, dass wir sowohl den Variablennamen (satisfaction) als auch den Wert (z.B. 1) auf dem Plot abbilden möchten, um es einfacher lesbar zu machen.\n\n```{r fig-fact-plot, fig.height = 8, fig.cap = \"Ein Histogramm mit Facetten.\"}\nggplot(survey_data, aes(x = call_time)) +\n  geom_histogram(binwidth = 10, \n                 boundary = 0, \n                 fill = \"dodgerblue\", \n                 color = \"black\") +\n  facet_wrap(~satisfaction, \n             ncol = 1, # versuchen Sie dies auf 2 zu ändern\n             labeller = label_both) +\n  scale_x_continuous(name = \"Anrufzeit (Sekunden)\",\n                     breaks = seq(0, 600, 30))\n```\n\n::: {.callout-note}\n## Weitere Plot-Stile\n\nDies sind nicht alle Plot-Typen, die Sie in R erstellen können. Dieses Kapitel gab Ihnen nur einen grundlegenden Überblick, und wir werden im Detail in @sec-custom-viz eingehen. Der Abschnitt [weitere Ressourcen](#resources-viz) am Ende dieses Kapitels listet viele Ressourcen auf, aber die [R Graph Gallery](http://www.r-graph-gallery.com/){target=\"_blank\"} ist besonders nützlich, um Inspiration für die Arten von schönen Plots zu erhalten, die Sie in R erstellen können.\n:::\n\n## Übungen\n\nAls letzten Schritt in diesem Kapitel werden wir einen Bericht über Datenvisualisierungen erstellen. Möglicherweise müssen Sie auf @sec-reports zurückgreifen, um Ihnen bei der Durchführung dieser Übungen zu helfen, und Sie möchten vielleicht auch eine Pause einlegen, bevor Sie diesen Abschnitt bearbeiten. Wir empfehlen Ihnen auch, bei jedem Schritt `r glossary(\"knit\")` zu verwenden, damit Sie sehen können, wie sich Ihre Ausgabe ändert.\n\n### Neues Markdown {#sec-exercises-new-rmd-3}\n\nErstellen und speichern Sie ein neues R Markdown-Dokument mit dem Namen `plots_report.Rmd` und geben Sie ihm den Titel \"Bericht zur Kundenzufriedenheit\". Entfernen Sie den Standardvorlagentext und laden Sie dann die unten stehenden Pakete und Code im Setup-Code-Block:\n\n```{r setup-report, message=FALSE}\nlibrary(tidyverse) \nlibrary(patchwork) \nlibrary(ggthemes)  \nlibrary(lubridate) \nlibrary(knitr)\nlibrary(kableExtra)\n\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n```\n\n### Zusammenfassung {#sec-exercises-summary}\n\nErstellen Sie eine Überschrift der Ebene 1 mit dem Titel \"Überblick\". Unter dieser Überschrift schreiben Sie eine kurze Zusammenfassung dessen, was der Datensatz enthält und was jede der Variablen bedeutet (Sie können die Informationen aus @sec-plots-loading-data verwenden, wenn Sie möchten).\n\n### Präsentation von Plots\n\nWählen Sie Ihre beiden Lieblingsplots aus allen Beispielen, die wir in diesem Kapitel erstellt haben. Für jeden Plot:\n\n* Erstellen Sie eine Überschrift der Ebene 2 in Ihrem R Markdown-Dokument und geben Sie ihr einen informativen Titel.\n* Schreiben Sie eine kurze Zusammenfassung, die die in den Plots dargestellten Daten interpretiert - es reicht nicht aus, nur Visualisierungen zu präsentieren, effektive Berichte werden dem Leser auch helfen, die Schlussfolgerungen zu verstehen, die sie aus den präsentierten Plots ziehen sollten.\n* Sehen Sie sich die verschiedenen verfügbaren Themen mit [<pkg>ggtheme</pkg>](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) an und wählen Sie eines aus, um es auf Ihre Plots anzuwenden.\n* Stellen Sie sicher, dass jeder Plot eine Bildunterschrift hat (entweder indem Sie diese zum `ggplot()`-Code hinzufügen oder sie zu den Code-Block-Optionen hinzufügen).\n* Organisieren Sie Ihr Markdown so, dass die Plots **nach** der Textzusammenfassung angezeigt werden.\n\n### Kombination von Plots\n\nWählen Sie nun Ihre beiden am wenigsten bevorzugten Plots aus:\n\n* Passen Sie die visuellen Ästhetiken an, um sie so schlecht und so schwer lesbar wie möglich zu machen.\n* Kombinieren Sie die Plots mit der Originalversion unter Verwendung von Patchwork-Funktionen.\n* Schreiben Sie eine kurze Zusammenfassung, die erklärt, warum Sie diese Plots so schlecht finden.\n* Organisieren Sie Ihr Markdown so, dass die Plots **nach** der Textzusammenfassung angezeigt werden.\n\n### Bearbeiten Ihrer Markdown-Anzeige\n\nPassen Sie das Setup Ihres Markdowns so an, dass Ihr gestrickter Bericht keinen Code, keine Nachrichten oder Warnungen anzeigt und alle Abbildungen 8 x 5 groß sind (siehe @sec-rmd-setup).\n\n### Teilen Sie Ihre Arbeit\n\nSobald Sie diese Aktivität abgeschlossen haben, posten Sie sie im Kanal Woche 3 auf Teams, damit Sie vergleichen können, welche Plots Sie ausgewählt haben und welchen visuellen Stil mit anderen Lernenden auf dem Kurs.\n\n## Glossar {#sec-glossary-viz}\n\n```{r, echo = FALSE}\nglossary_table()\n```\n\n## Weitere Ressourcen {#sec-resources-viz}\n\n* [ggplot2-Spickzettel](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)\n* [Datenvisualisierung mit R für Forscher, die kein R verwenden](https://psyteachr.github.io/introdataviz/) [@nordmann_2021]\n* [Kapitel 1: Datenvisualisierung](https://r4ds.hadley.nz/data-visualize) aus *R für Datenwissenschaft*\n* [ggplot2 FAQs](https://ggplot2.tidyverse.org/articles/)\n* [ggplot2-Dokumentation](https://ggplot2.tidyverse.org/reference/)\n* [Hack Your Data Beautiful](https://psyteachr.github","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"html-table-processing":"none"},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["panelize","webr"],"css":["include/psyteachr.css","include/webex.css","include/style.css"],"highlight-style":"a11y","include-after-body":["include/webex.js","include/script.js"],"output-file":"08-data-viz.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","bibliography":["include/book.bib","include/packages.bib"],"csl":"include/apa.csl","webr":{"packages":["tidyverse"]},"theme":{"light":["flatly","include/light.scss"],"dark":["darkly","include/dark.scss"]},"code-copy":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}