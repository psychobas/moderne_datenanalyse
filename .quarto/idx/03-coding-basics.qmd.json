{"title":"Coding basics","markdown":{"headingText":"Coding basics","containsRefs":false,"markdown":"\nIn diesem Kapitel lernen wir die Basics des Programmierens mit R. Hier mag einiges noch abstrakt und zusammenhangslos erscheinen. Die hier behandelten Konzepte werden aber im Verlaufe des Semesters immer wieder auftauchen und damit verständlicher werden. \n \n## Erstellung des ersten Skripts\n\nWie wir im ersten Kapitel gesehen haben ist ein Grund für die Verwendung von RStduio, dass wir damit R-Skripte erstellen und ausführen können. Wir könnten den Code zwar auch direkt in der Konsole ausführen, das ist jedoch mühsam und unübersichtlich. Deshalb erstellen wir als erstes ein neues R-Skript, in dem wir die hier besprochenen \"Befehle\" (Codes) sammeln und abspeichern. Dies hat auch den Vorteil, dass die ausgeführten Analysen reproduzierbar sind. Wollen wir die durchgeführten Analysen zu einem späteren Zeitpunkt nochmals wiederholen, öffnen wir einfach wieder das gespeicherte Skript und lassen dieses laufen (sprich \"schicken\" den Code an die R-Konsole). \n\nDie Verwendung der Konsole ist sehr praktisch, zeichnet jedoch nicht auf, was wir gemacht haben. R-Skripte dienen genau diesem Zweck: Sie sammeln Ihre Befehle, die Sie als Datei speichern und jederzeit erneut ausführen können. Dies ist die erste Säule guter Codierung: reproduzierbare Codes.\n\nUm ein neues Skript zu erstellen, kann man auf Datei -> Neues Dokument -> R-Skript klicken oder einfach Umschalt+cmd+N auf dem Mac oder Umschalt+Ctrl+N auf Windows drücken. \n\n## Code über Skripte ausführen\n\nIm Grunde genommen ist R nichts anderes, als ein fancy Taschenrechner. So können wir die Summe von 1 + 1 berechnen:\n\n```{r}\n1 + 1\n```\n\n\nUm diesen Code auszuführen müssen wir ihn wie gesagt an die Konsole \"schicken\". Dies geschieht am einfachsten, indem man mit dem Cursor auf die Zeile klickt, die man ausführen möchte (die horizontale Position spielt dabei keine Rolle) und dann Ctrl + Enter (Windows) oder Cmd + Enter (Mac) drückt. \n\nUm diesen Code auszuführen, müssen Sie ihn über die Konsole ausführen, was auf verschiedene Arten geschehen kann. Der offensichtlichste Weg ist, ihn in die Konsole zu kopieren und einzufügen, was jedoch nicht sehr effizient ist. Am schnellsten ist es, den Cursor in die Zeile zu bringen, die Sie ausführen möchten, und cmd+Return oder Strg+Eingabe zu drücken. \n\n**Tipp:** Man mann mehrere Zeilen auf einmal auswählen und dieselbe Methode verwenden, um mehrere Codes (Codeblock) auf einmal auszuführen.\n\nNeben zahlen versteht R auch Zeichen (Text), dabei müssen wir jedoch vor und nach dem Text die Anführungszeichen ' oder \" verwenden:\n\n```{r}\n\"Hello world!\"\n```\n\n\nDies müssen wir tun, damit R weiss, dass es sich bei diesem Text nicht um Code handelt, den R interpretieren (ausführen) soll. Tun wir dies nicht, sehen wir eine Fehlermeldung. \n\n```{r error=TRUE}\nHello world!\n```\n\n\n\n\n## Variablen \nFühren wir Code wie oben beschrieben aus, wird dieser ausgeführt und das Ergebnis erscheint in der Konsole. Das Resultat der Berechnung(en) wird jedoch nicht gespeichert. Oft wollen wir aber das Resultat unserer Berechnungen speichern. Wenn wir eine Regression berechnen, wollen wir das Resultat speichern, damit wir später wieder darauf zugreifen können. Um dies zu tun, können wir die Berechnung in sogenannten `Objekten` oder `Variablen` speichern. Diese Objekte/Variablen enthalten dann das Resultat unserer Berechnung. Der folgende Code speichert das Resultat der Berechnung `1 + 1` im Objekt `resultat_der_berechnung`\n\n\n```{r}\nresultat_der_berechnung <- 1 + 1\n```\n\n\nBeim Ausführen dieses Befehls scheint nichts zu passieren – zumindest wird im Konsolenfenster nichts angezeigt, nur der Befehl wird ausgeführt. Allerdings erscheint eine neue Variable im Environment-Fenster im Abschnitt Werte (Values), mit dem Namen `resultat_der_berechnung` und dem Wert `2`. Dies zeigt uns an, dass diese Variable in der aktiven R-Session gespeichert wurde und wir später wieder darauf zugreifen können (die Variable ist jedoch nur solange gespeichert, bis wir RStudio schliessen!). \n\n\n```{r}\nresultat_der_berechnung\n```\n\n\n## Coding best practices\nBevor wir uns vertieft mit der Syntax (Grammatik) von R beschäftigen, besprechen wir ein paar \"best practices\" die das Programmieren in R langfristig erleichtern. \n\n\n### Sinnvolle Variablennamen\nDurch das Ausführen verschiedener Berechnungen werden wir schnell mehrere Objekte/Variablen in der \"Environment\" haben. Damit wir da nicht den Überblick verlieren, ist es wichtig, diese Objekte sinnvoll zu benennen. Sinnvoll liegt hier im Ermessen des Programmierenden. Es gibt jedoch zwei häufig verwendete Namenskonventionen und ein paar Symbole, die nicht verwendet werden können. \n\n\n\n\n\nDie Namenskonvention in der Programmierung hat im Großen und Ganzen zwei große Zweige. Der eine nutzt Großbuchstaben, der andere Unterstriche. Beide sind gut, aber versuchen Sie, sie nicht zu mischen. Sie sind völlig frei, jeden Variablennamen zu verwenden, aber beachten Sie immer die drei Anforderungen:\n\n1. snake_case:\n- Die erste Konvention heisst `snake case`. Dabei trennt man Wörter in Variablennamen mit einem Unterstrich `_`.\n\n2. CamelCase:\n- Die zweite Konvention heisst `camel case`. Dabei werden Wörter durch Grossbuchstaben getrennt. \n\nSnake Case wird etwas häufiger verwendet und ist meiner Meinung nach besser lesbar, deshalb verwenden wir in diesem Skript diese Namenskonvention. Einige Zeichen dürfen/können nicht für Objektnamen verwendet werden (-,.,!~=&^%$). Zudem dürfen Objektnamen nicht mit Zahlen beginnen. Darüber hinaus sind der Fantasie keine Grenzen gesetzt. Kürzere Objektnamen sind jedoch zu bevorzugen. Obwohl wohl jedem klar wird, was in dem Objekt mit dem Namen `das_resultat_der_ersten_regression_meiner_bachelorarbeit` gespeichert wird, ist der Name wohl etwas zu lange. Was wäre ein guter, aber kürzerer, Name?\n\n\n```{r, echo=FALSE, fig.cap=\"Beispiel eines schlechten Objektnamens.\"}\nknitr::include_graphics(\"_main_files/figure-html/bad_naming.jpg\")\n```\n\n### Kommentare\nDas Kommentieren des geschriebenen Codes ist fast genau so wichtig wie der Code selbst. Zeilen, die mit dem #-Zeichen beginnen, werden von R als Kommentar erkannt und nicht ausgeführt:\n```{r}\n#das ist ein Kommentar\nprint(\"Das ist kein Kommentar\")\n```\n\n\nDas Kommentieren hat zwei Zwecke:\n\n1. Jemand anderem (oder dem zukünftigen Ich!) mitteilen, was der Befehl in der nächsten Zeile tut (oder tun soll…)\n\n2. \"In-progress\" Code oder alten Code auskommentieren, damit er nicht ausgeführt wird, jedoch noch ersichtlich ist. Um Code auszukommentieren kan man die Tastenkombination cmd+shift+c (Mac) oder ctrl+shift+c (Windows) verwenden. Markiert man dabei mehrere Zeilen, werden alle markierten Zeilen auskommentiert. \n\n\n**Tipp:**: je länger man schon programmiert, desto eher vergisst man mal, den geschriebenen Code zu kommentieren. Dies liegt unter anderem daran, dass man den Code schneller lesen kann/versteht. Trotzdem ist es eine gute Gewohnheit, Code kontinuierlich zu kommentieren. Dies weiss auch ChatGPT:\n\n\n```{r, echo=FALSE, out.width=800}\nknitr::include_graphics(\"_main_files/figure-html/commenting_code.png\")\n```\n\n\n\n\n## Platzierung und Formatierung des Codes\nUm Code lesbarer zu machen, gibt es sogenannte [Style-guides](http://adv-r.had.co.nz/Style.html) die vorschreiben, wie man code strukturieren und formattieren soll. \n\nWir wollen hier nur zwei Grundsätze nennen: \n\n1. Abstände verwenden\n```{r}\n#schlecht\na<-1\n\n#gut \na <- 1\n```\n\n2. Längere codes/Skripte in Codeblöcke unterteilen, die durch Absätze getrennt sind\n\n\n\n## R-Objekte\nOben haben wir bereits ein R-Objekt erstellt, message_world, eine Variable mit einem einzelnen Wert, die ein Zeichen-R-Objekt enthielt. Objekte können verschiedene Werte enthalten. Hier ein paar Beispiele von solchen Werten, die zu unterschiedlichen Objektclassen führen: \n\n**R-Objekte**:\n\n- *Zeichen (character)* - auch bekannt als 'string'. Jede Variable, die Buchstaben, Sonderzeichen oder Zahlen zwischen '' oder \"\" enthält. Wenn Sie ein Zeichen erstellen, entscheiden Sie, ob Sie ' oder \" verwenden und verwenden Sie sie konsistent. \n- *numerisch* - jeder numerische Wert wird im Allgemeinen als 'double' bezeichnet.\n- *integer* - Ganzzahl. Ein zusätzliches ‘L’ wird neben dem Wert im 'Environment' Fenster angezeigt, um zu zeigen, dass es sich um einen Integer und nicht um einen numerischen ('double') Wert handelt.\n- *logisch* - hat nur zwei Werte: TRUE oder FALSE, möglicherweise nachdem eine Aussage ausgeführt und als wahr oder falsch bewertet wurde\n- *Faktor* - spezielles R-Objekt, das wir in späteren Vorlesungen besprechen werden.\n\nWir können den Typ eines Objektes mit der Funktion `typeof`ermitteln:\n\n```{r}\n#Zeichen \ncharacter_object <- \"hello\"\nclass(character_object)\n```\n\n```{r}\n#numerisch \ndouble_object <- 1.3\nclass(double_object)\n```\n\n```{r}\n#integer \ninteger_object <- 1L\nclass(integer_object)\n```\n\n```{r}\n#Faktor\nfactor_object <- factor(c(1 ,2, 3), levels = c(\"low\", \"medium\", \"high\"))\nclass(factor_object)\n```\n\n\n\n\n\n## Operationen mit numerischen Werten\nMan kann numerische Variablen ähnlich wie Zeichenwerte definieren:\n\n\n```{r}\na <- 2\nb <- 3\n```\n\n\nJetzt können wir anstelle der Zahlen 2 und 3 a und b verwenden, wenn wir mathematische Operationen durchführen:\n\n```{r}\na + b\n```\n\n\n```{r}\na+b-(a*b)^a\n```\n\n\nWir können neue Variablen erstellen, die durch bereits vorhandene Variablen definiert sind:\n\n```{r}\nc <- a + b\nd <- a*c/b*c\n```\n\n\n\n\n## Operationen mit logischen Werten\n\nLogische Operatoren kann man verwenden um zu prüfen, ob zwei Werte/Objekte identisch sind oder nicht. \n\n\nÜberprüfen, ob Werte gleich sind, mit dem == Befehl\n```{r}\n6 == 12\n```\n\n\nÜberprüfen, ob zwei Variablen/Objekte identisch sind,\n```{r}\na == b\n```\n\n\nÜberprüfen, ob eine modifizierte Variable gleich der anderen ist,\n\n```{r}\n(a + 1) == b\n```\n\n\nMan kann auch überprüfen, ob die zwei Variablen nicht gleich sind, mit dem != Befehl:\n```{r}\na != b\n```\n\n\nEs ist auch möglich, komplexere Vergleiche mit mehreren Aussagen zu machen. Z.B. können wir vergleichen, ob 2==2 und 3==2 mit dem & Operator:\n```{r}\n2 == 2 & 3 == 2\n```\n\n\noder, ob 2==2 oder 3==2 mit dem | Operator\n```{r}\n2 == 2 | 3 == 2\n```\n\n\nHinweis: Später werden wir den Unterschied zwischen &, | und &&, || Operatoren besprechen.\n\n\n## Operationen mit R-Objekten\n\nIm Allgemeinen haben unterschiedliche R-Objekte unterschiedliche Grundoperationen. Die wichtigsten Grundoperationen sind die zuvor erwähnten numerischen und logischen Operationen.\n\n\n\n## Einfache Funktionen\nWir brauchen R natürlich nicht, um einfache Berechnungen wie oben aufgeführt durchzuführen, sondern um etwas komplexere Berechnungen wie zum Beispiel Regressionen durchzuführen. Hier kommen Funktionen ins Spiel. Funktionen haben einen oder mehrere Inputs, stellen mit diesem Input etwas an, und ergeben dann einen Output. \n\nBis jetzt haben wir schon einige Funktionen gesehen, auch einfache Berechnungen wie `2 + 3` basieren auf der `+` Funktion. In der Regel sind Funktionen aber etwas komplexer, indem sie eine Reihe von Berechnungen bündeln. Funktionen sind durch ihren Namen definiert und wie folgt aufgebaut:\n\n\n`name(input)`\n\nwobei `name` der Name der Funktion ist, der R mitteilt, welche Funktion (sprich Berechnung) mit dem Input ausgeführt werden soll. Funktionen verwenden **immer** `(` und `)` Klammern, und innerhalb der Klammern müssen Sie den `Input` definieren, die von der Funktion abhängt. Auch die `+` Funktion kann in diesem Format verwendet werden:\n\n```{r}\n`+`(2, 3)\n```\n\n\nEin Beispiel für eine etwas komlexere Funktion ist die Funktion `mean`, die den Mittelwert berechnet:\n\n```{r}\nmean(c(2,3))\n```\n\nDieses Beispiel zeigt auch, dass Funktionen genestet werden können. Dann werden, genau wie in der Mathematik, die Funktionen von innne nach aussen ausgeführt. Um R Code lesbarer zu machen, sollte man genestete Funktionen wenn möglich vermeiden. So kann man en obigen Code auch so schreiben:\n\n```{r}\nnumeric_vector <- c(2, 3)\nmean(numeric_vector)\n```\n\nSo haben wir die beiden Funktionen voneinander getrennt und den Code so lesbarer gemacht. Wenn wir mehr über eine Funktion erfahren möchten, können wir das mit dem `?` Symbol tun, also `?name`:\n```{r}\n#?mean\n```\n\nDadurch wird das Hilfefenster aufgerufen, wo wir mehr über die Funktion erfahren (erwartete Inputs, Argumente, Output). Die Hilfeseite der Funktion `mean`sieht wie folgt aus:\n\n\n```{r, echo=FALSE, out.width=800}\nknitr::include_graphics(\"_main_files/figure-html/help_mean.png\")\n```\n\n\n\nDiese Hilfeseiten sehen zu Beginn etwas kryptisch aus, enthalten aber fast alles, was es über eine Funktion zu wissen gilt. Besonders wichtig ist der Abschnitt **Arguments**. Dort werden alle Inputs gelistet, die eine Funktion erwartet. \n\nWir sehen, dass das erste Argument der Funktion `mean` x heisst und einen Vektor erwartet. Generell ist es eine gute Konvention, Inputs mit Namen den entsprechenden Argumenten zuzuweisen, also\n```{r}\nmean(x = numeric_vector)\n```\n\nDies ist jedoch nicht zwingend. Wenn wir die Namen weglasssen, werden die Inputs der Reihe nach den entsprechenden Argumenten zugewiesen. Deshalb funktioniert auch die Schreibweise `mean(numeric_vector)`. Bei Funktionen, die häufig verwendet werden und (oft) nur einen Input brauchen, wird der Name des Arguments auch häufig weggelassen. \n\n\n\n\n\n## Variablen: Kombinieren mehrerer R-Objekte in einer Variable\n\nDurch die Verwendung einer einfachen, aber sehr wichtigen, Basisfunktion können wir mehrere numerische Werte zu einem Vektor zusammenfassen. Wir haben diese Funktion bereits bei der Berechnung des Mittelwerts oben verwendet, nämlich die `c()`Funktion. \n\n\n```{r}\nv <- c(2,5,10)\nz <- c(3,4,7)\n```\n\n\n\nJetzt haben wir zwei Vektoren, die wir verwenden können, um verschiedene Vektoroperationen durchzuführen, wie Addition, Multiplikation usw.\n\n```{r}\nv + z\n```\n\nIn diesem Kontext ermöglicht uns die Vektorisierung, Operationen alle Elemente der Vektoren gleichzeitig auszuführen, anstatt einzelne Elemente in einer Schleife zu bearbeiten. Diese Methode ist nicht nur effizienter, sondern auch einfacher zu schreiben und zu lesen.\n\nWenn wir also wie oben zwei Vektoren in R haben und eine Operation wie Addition ausführen, führt R die Addition elementweise durch. Das bedeutet, dass jedes Element des Vektors v mit dem entsprechenden Element des Vektors z addiert wird. Das Ergebnis ist ein neuer Vektor, dessen Elemente die Summen der entsprechenden Elemente von v und z sind. \n\nDiese Art der Vektorisierung ist besonders mächtig, da sie es uns erlaubt, komplexe Berechnungen mit sehr wenig Code effizient durchzuführen. Im Gegensatz zu Schleifen (\"Loops\"), die in vielen anderen Programmiersprachen verwendet werden, kann die Vektorisierung Code vereinfachen und beschleunigen, indem sie interne Optimierungen von R nutzt.\n\n\nWenn wir die Vektorisierung verwenden (was R autmomatisch tut) müssen wir schauen, dass die Inputs die Selbe Länge haben. Dies können wir mit der `length()`Funktion überprüfen:\n\n```{r}\nlength(v)\n```\n\n\n```{r}\nlength(v) == length(z)\n```\n\nVerwenden wir die Vektorisierung, obwhol die beiden Elemente nicht die selbe Länge haben, werden wir von R gewarnt:\n\n```{r}\nb <- c(1, 2)\n\nb + z\n```\n\nR wendet in diesem Fall trotzdem Vektorisierung an, recycelt aber den kürzeren Vektor. Es finden also folgende (elementenweisen) Berechnungen statt: `1 + 3`, `2 + 4`, und `1 + 7`. Der kürzere Vektor wird also recycelt (das erste Elemnt von `b`wird zwei mal verwendet). Hat der kürzere Vektor eine Länge von 1, werden wir hingegen nicht gewarnt: \n\n```{r}\nc(2) * z\n```\n\n\n\n*Nebenbemerkung*: die `c()` Funktion kann auch verwendet werden, um Vektoren zu verbinden:\n\n\n```{r}\nw <- c(v,z)\nw\n```\n\n```{r}\nlength(w)\n```\n\n\n\n\n## Indizierung\nOft werden wir in R mit Ojekten/Daten arbeiten, die deutlich grösser/länger sind als die, die wir bis jetzt verwendet haben. Oft wollen wir dabei aber Berechnungen durchführen, die nur einen Teil der Daten betreffen. Zum Beispiel den Mittelwert für eine Variable getrennt nach dem Geschlecht der ProbandInnen. Dabei kommt die sogenannte Indizierung ins Spiel.\n\nDurch Indizierung können wir bestimmte Teile eines Vektors auswählen. Dies tun wir mit eckigen Klammern `[]`. So können wir zum Beispiel das erste Element eines Vektors auswählen:\n\n```{r}\nv[1]\n```\n\n\noder das erste und das dritte:\n\n```{r}\nv[c(1, 3)]\n```\n\nWenn wir längere Vektoren haben, hilft die `:` Funktion bei der Auswahl. Die `:`Funktion generiert ein Intervall von Ganzzahlen:\n```{r}\n1:10\n```\n\nSo können wir zum Beispiel die Elemente 2 bis 3 auswählen:\n```{r}\nv[2:3]\n```\n\nDie Indizierung ist sehr wichtig uns wird uns noch häufiger begegnen. \n\n\n## Spezielle Variablen/Werte\n\n### Leere Variable\nEs gibt einen Nullvektor oder eine leere Variable, die nichts enthält. Später werden wir sehen, dass dies nützlich ist für die Programmierung von Loops. \n```{r}\nnull_vector <- c()\nnull_vector\n```\n\n\n### NA- oder NaN-Wert\nWenn ein Wert fehlt oder unbekannt ist, wird er normalerweise als `NA` oder `NaN` gekennzeichnet. `NA` steht für unbekannten Wert, während `NaN` für „Not-a-Number“ steht, speziell für fehlende numerische Werte entworfen. In der Praxis sind sie auf unserem Niveau jedoch im Wesentlichen gleich, und wir werden eher `NA` verwenden.\n\nDer Umgang mit `NA`-Werten ist ziemlich gleich: sie reagieren nicht auf Operationen und bleiben NAs:\n```{r}\nna_vec <- c(NA,1,2,3,4)\nna_vec + 3\n```\n\nIn anderen Fällen können fehlende Werte jedoch tükisch sein, zum Beispiel beim Berechnen des Mittelwertes:\n```{r}\nmean(na_vec)\n```\n\nDer Mittelwert ist in diesem Fall nicht definiert, weil wir den Wert einer Zahl nicht wissen. \n\n\n\n\n### Inf-Wert\nIn R steht `Inf` für ‚Unendlich‘, was sich von `NA` unterscheidet, da es für eine sehr große Zahl steht. Es wird normalerweise angetroffen, wenn eine mathematische Operation keinen Wert hat, aber im Grenzfall gegen Unendlich konvergiert, wie zum Beispiel:\n\n```{r}\n5/0\n```\n\n\n\nSie können auch eine Variable definieren, die einen unendlichen Wert hat, und Operationen damit durchführen,\n```{r}\ninf_val <- Inf\ninf_val*-1\n```\n\n```{r}\ninf_val*3\n```\n\n\n\n### Gut zu wissen: Rundungsgenauigkeit in R\nAuch wenn R ein sehr mächtiger Taschenrechner ist, hat er auch seine Limitationen. So kann R die Genauigkeit von Zahlen nur bis zu einem gewissen Grad räpresentieren. Dies kann dann zu kleinen Ungenauigkeiten und verblüffenden Ergebnissen führen:\n\n```{r}\nsqrt(2)^2 == 2\n```\n\nWir können die Berechnungen mit der `round` Funktion runden um zu schauen, wie genau R die Zahlen repräsentiert. Runden wir die Zahlen auf 14 Nachkommastellen, erhalten wir das erwartete Resultat: \n\n\n```{r}\nround(sqrt(2)^2, 14) == round(2, 14)\n```\n\nJedoch nicht mehr, wenn wir auf 15 Nachkommastellen runden: \n```{r}\nround(sqrt(2)^2, 15) == round(2, 15)\n```\n\nFür Forschung wie wir sie in den Sozialwissenschaften betreiben reicht dies jedoch mehr als aus. \n\n\n\n## Variablentypen\nWir haben nun schon einige Variablentypen gesehen (z.B. Vektoren). Hier eine kurze Übersicht von weiteren, häufig verwendeten Typen:\n\n\n- Vektoren: enthalten nur dieselben R-Objekte (Werte) in einem eindimensionalen Vektor\n- Listen: können unterschiedliche R-Objekte als Elemente mischen\n- Matrizen: enthalten dieselben R-Objekte (Werte) in einer zweidimensionalen Matrix\n- Arrays: ermöglichen mehrdimensionale Matrizen\n- Faktoren: ein spezieller Vektor, der kategoriale oder ordinale Werte enthält. Wir werden diese in späteren Klassen sehen\n- Dataframe: enthalten Daten, im Grunde eine flexible Matrix, die unterschiedliche Vektoren mit unterschiedlichen R-Objekten enthalten kann und organisiert ist, als hätte sie Variablen und Beobachtungen. Wir werden dies im nächsten Kapitel genauer besprechen.\n\n\n### Vektoren\nWir haben bereits numerische Vektoren erstellt. Nur der Vollständigkeit halber können wir auch Zeichen- und logische Vektoren erstellen:\n```{r}\nchar_vec <- c('a','b','banana','I love R')\nlog_vec <- c(TRUE,FALSE,T,NA,F)\n```\n\n**Zu tun:** Versuchen Sie, unterschiedliche R-Objekttypen in einem Vektor zu mischen! Was passiert? Spielen Sie mit verschiedenen Typen und überprüfen Sie mit der Funktion typeof!\n\n\n### Listen\nListen sind sehr nützlich, um unterschiedliche Typen von R-Objekten zu kombinieren. Diese werden über die Funktion `list()` erstellt:\n```{r}\nmy_list <- list('a',2,0==1)\nmy_list\n```\n\n\nwobei `my_list` diese unterschiedlichen Typen kombiniert. Wenn man aufpasst, ist leicht zu erkennen, dass die Ausgabe anders ist als bei einem einfachen Vektor. Tatsächlich ist sie so strukturiert, dass sie 3 Elemente hat und innerhalb jedes Elements ein R-Objekt oder möglicherweise ein Vektor ist:\n```{r}\nmy_list2 <- list(c('a','b'),c(1,2,3),sqrt(2)^2==2)\nmy_list2\n```\n\n`my_list2` zeigt, dass Listen im Wesentlichen unterschiedliche Vektoren in ihren Elementen speichern, und diese Vektoren müssen die gleichen R-Objektwerte in ihnen haben, aber die Länge kann unterschiedlich sein.\n\nDa Listen auf diese Weise erstellt werden, unterscheidet sich die Indizierung ein wenig. Sie können die unterschiedlichen Elemente ähnlich wie bei den Vektoren auswählen:\n```{r}\nmy_list2[1]\n```\n\nund das ausgewählte Element wird immer noch ein Listentyp sein. Wenn Sie den Vektor aus diesem bestimmten Element haben möchten, müssen Sie doppelte Klammern verwenden:\n```{r}\nmy_list2[[1]]\n```\n\nund schließlich können Sie bestimmte Elemente aus dem Vektor, den Sie ausgewählt haben, auf folgende Weise erhalten:\n```{r}\nmy_list2[[1]][2]\n```\n\nDiese Art der Indizierung wird praktisch sein, wenn man mit Listen arbeitet und auch hilft, besser zu verstehen, wie man mit Datentypen von Datenrahmen arbeitet.\n\n\n\n\n\n\n\n\n\n\n\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"html-table-processing":"none"},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["panelize","webr"],"css":["include/psyteachr.css","include/webex.css","include/style.css"],"highlight-style":"a11y","include-after-body":["include/webex.js","include/script.js"],"output-file":"03-coding-basics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","bibliography":["include/book.bib","include/packages.bib"],"csl":"include/apa.csl","webr":{"packages":["tidyverse"]},"theme":{"light":["flatly","include/light.scss"],"dark":["darkly","include/dark.scss"]},"code-copy":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}