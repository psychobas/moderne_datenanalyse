# Einführung in Tibbles

```{r}
library(tidyverse)
```


In diesem Kapitel werden wir die Grundlagen von Tibbles kennenlernen, eine moderne Datenstruktur in R, die besonders im tidyverse verwendet wird. Tibbles sind eine Weiterentwicklung der traditionellen Dataframes und bieten einige Vorteile in der Handhabung und Datenmanipulation.

## Tibbles als Datentyp

Tibbles sind ein Objekttyp in R, entwickelt, um mit dem Tidyverse kompatibel zu sein. Im Gegensatz zu traditionellen Dataframes bieten Tibbles eine vereinfachte, aber robustere Datenmanipulation, was sie ideal für Datenanalyse macht.

Tibbles sind eine moderne Variante von `dataframes`. `Dataframes` sind Teil der "Grundausstattung" von R (auch häufig "base-R" genannt). Wir haben bereits in Kapitel x kurz über dataframes gesprochen, hier nochmals die Definition: 
- Dataframe: enthalten Daten, im Grunde eine flexible Matrix, die unterschiedliche Vektoren mit unterschiedlichen R-Objekten enthalten kann und organisiert ist, als hätte sie Variablen und Beobachtungen. Wir werden dies im nächsten Kapitel genauer besprechen. Dataframes kann man wie folgt erstellen: 

```{r}
df_base_r <- data.frame(
  id = c(1,2,3,4,5,6),
  age = c(25,30,33,NA,26,38),
  grade = c('A','A+','B','B-','B+','A')
)

head(df_base_r)
```


```{r}
# Tibble erstellen
df <- tibble(id = c(1, 2, 3, 4, 5, 6),
             age = c(25, 30, 33, NA, 26, 38),
             grade = c('A', 'A+', 'B', 'B-', 'B+', 'A'))

# Daten überprüfen
head(df)
```


## Indexierung im Allgemeinen

### Indexierung mit Ganzzahlen

Man kann bestimmte Elemente auswählen, indem man Ganzzahlen verwendet.

```{r}
# Erste Spalte als Tibble-Variable
df[1]

# Erste Spalte alle Beobachtungen
df[, 1]

# Zweite Zeile
df[2, ]

# Spezifische Zelle (2. Beobachtung, 1. Variable)
df[2, 1]

# Mehrere Zeilen für mehrere Variablen
df[1:3, c(1, 3)]
```

### Indexierung mit logischen Werten

Man kann einen logischen Vektor anstelle der Ganzzahlen-Indexierung verwenden, um bestimmte Elemente zu filtern.

```{r}
# Alter der Beobachtung mit id == 3
df$age[df$id == 3]

# Notenwerte für Schüler mit Alter zwischen 25 und 35
df$grade[df$age >= 25 & df$age < 35]
```

## Einfache Funktionen

Man ist oft an bestimmten Eigenschaften der Daten interessiert. Funktionen wie `sum()`, `mean()` und `sd()` sind hierbei nützlich. Im Verlaufe des Semesters werden wir noch mehr solche Funktionen kennenlernen. 
```{r}
# Summe des Alters
mean(df$age)
```

Wie wir oben gesehen haben, enthält die Variable `age` fehlende Werte. Um den Mittelwert der nicht fehlenden Werte zu berechnen, müssen wir deshalb das Argument `na.rm = TRUE` hinzufügen:


```{r}
# Mittelwert des Alters
mean(df$age, na.rm = TRUE)

# Summe des Alters
sum(df$age, na.rm = TRUE)

# Standardabweichung des Alters
sd(df$age, na.rm = TRUE)
```

## Werte zurücksetzen, neue Spalten oder Zeilen hinzufügen

### Werte zurücksetzen

Fehler in den Daten können einfach korrigiert werden.

```{r}
# Setzt das Alter für id == 1 auf den Wert 40
df$age[df$id == 1] <- 40
print(df)
```

### Spalten hinzufügen

Neue Variablen können leicht hinzugefügt werden.

```{r}
# Neue Variable 'gender' hinzufügen
gender <- c('F', 'F', 'M', 'M', 'M', 'F')
df$gender <- gender

# Alternativ mit add_column
df <- add_column(df, gender_new = gender)

# Variable entfernen
df <- select(df, -gender_new)
print(df)
```

### Zeilen hinzufügen

Neue Beobachtungen können mit der Funktion `add_row()` hinzugefügt werden.

```{r}
# Neue Zeile hinzufügen
df <- add_row(df, id = 7, age = 25, grade = 'C+', gender = 'M')
print(df)

# Zeile entfernen
# df$id != 7 generiert den folgenden Vektor: TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE, der die Grundlage für die Indizierung bildet
df <- df[df$id != 7, ]
print(df)
```





## Tidy Data

Tidy Data ist ein Konzept in der Datenanalyse, das sicherstellt, dass Daten in einem klaren und konsistenten Format vorliegen. In Tidy Data hat jede Variable ihre eigene Spalte, jede Beobachtung ihre eigene Zeile und jede Art von beobachteter Einheit bildet eine Tabelle. Dies erleichtert die Manipulation, Visualisierung und Modellierung der Daten.

### Prinzipien des Tidy Data Ansatzes

1. **Jede Variable hat ihre eigene Spalte.**
2. **Jede Beobachtung hat ihre eigene Zeile.**
3. **Jede Art von beobachteter Einheit bildet eine Tabelle.**


```{r, echo=FALSE}
knitr::include_graphics("_main_files/figure-html/clean_data.jpg") 
```

### Beispiel für Tidy Data

Schauen wir uns ein Beispiel an, um die Prinzipien von Tidy Data zu verdeutlichen:

```{r}
# Erstellen eines Tidy Data Tibble
tidy_data <- tibble(
  country = c('Afghanistan', 'Brazil', 'China', 'Afghanistan', 'Brazil', 'China'),
  year = c(1999, 1999, 1999, 2000, 2000, 2000),
  value = c(745, 37737, 212258, 2666, 80488, 213766)
)

# Daten anzeigen
tidy_data
```

### Beispiel für Nicht-Tidy Data

Im Gegensatz dazu sehen Nicht-Tidy Data oft unorganisiert aus und erschweren die Analyse. Hier ist ein Beispiel für Nicht-Tidy Data, das dem Datensatz `table4a` ähnelt:

```{r}
# Erstellen eines Nicht-Tidy Data Frames
non_tidy_data <- tibble(
  country = c('Afghanistan', 'Brazil', 'China'),
  `1999` = c(745, 37737, 212258),
  `2000` = c(2666, 80488, 213766)
)

# Daten anzeigen
non_tidy_data
```


### Umwandeln von Nicht-Tidy Data in Tidy Data

Um Nicht-Tidy Data in Tidy Data zu konvertieren, kann man die Funktion `pivot_longer()` verwenden. Hier zeigen wir, wie man dies erreicht:

#### Beispiel für Weites Format zu Langem Format

```{r}
# Nicht-Tidy Data in Tidy Data umwandeln (Weit zu Lang)
tidy_from_non_tidy <- pivot_longer(non_tidy_data, 
                                   cols = c(`1999`, `2000`),
                                   names_to = "year",
                                   values_to = "value")

# Daten anzeigen
tidy_from_non_tidy
```

Mit diesen Prinzipien und Techniken können Sie sicherstellen, dass Ihre Daten stets im Tidy Format vorliegen, was die Datenanalyse erheblich erleichtert. Leider kommt "non-tidy data" in alle Farben und Formen. Deshalb gibt es kein einfaches Rezept, wie man von nicht-tidy zu tidy Data kommt. Wir werden aber im Verlauf des Semesters (vor allem im nächsten Kapitel) Funktionen kennenlernen, die dafür hilfreich sind.

```{r, echo=FALSE}
knitr::include_graphics("_main_files/figure-html/bad_data.jpg.webp") 
```


Durch das Verständnis dieser grundlegenden Operationen können Sie Daten in R effizient verwalten und analysieren.