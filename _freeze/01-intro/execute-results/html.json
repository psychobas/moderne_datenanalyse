{
  "hash": "8904049b00df58eabd6e8ece527b507c",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell layout-align=\"center\"}\n\n:::\n\n\n# Intro to R and RStudio {#sec-intro}\n\n## Intended Learning Outcomes {#sec-ilo-intro .unnumbered}\n\n-   Install R and RStudio\n-   Be able to install add-on packages\n-   Be able to get help for packages and functions\n-   Be able to create objects by writing and running code in the console\n\n## Functions used {#functions-intro}\n\n\n\n\n\n-   built-in (you can always use these without loading any packages)\n    -   base:: `.rs.restartR()`, `as.Date()`, `library()`, `paste()`, `sample()`, `Sys.Date()`\n    -   utils:: `?`, `install.packages()`, `vignette()`\n-   other (you need to load each package to use these)\n    -   beepr:: `beep()`\n    -   devtools:: `install_github()`\n\n## Walkthrough video {#sec-walkthrough-intro .unnumbered}\n\nThere is a walkthrough video of this chapter available via [Echo360.](https://echo360.org.uk/media/3861d902-df69-417d-8f27-259089f992b8/public) We recommend first trying to work through each section of the book on your own and then watching the video if you get stuck, or if you would like more information. This will feel slower than just starting with the video, but you will learn more in the long-run. Please note that there may have been minor edits to the book since the video was recorded. Where there are differences, the book should always take precedence.\n\nDownload the [RStudio IDE Cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/rstudio-ide.pdf){download=\"\"}\n\n## Installing R and RStudio {#sec-intro-installing-r}\n\nR is a programming language that you will write code in and RStudio is a program that makes working in R easier.\n\n@sec-installing-r has technical details on installing R and RStudio on your computer. If you need any help installing R, please ask on Teams or attend office hours. Once you have installed R and RStudio, come back to this chapter. If you already had R and/or RStudio installed, we recommend updating to the latest version before you work through this course. @sec-updating-r has more details on how to do that. Here, we'll concentrate on introducing you to RStudio's interface and getting it configured.\n\n::: callout-note\n## Book version\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nThis book was created using R version 4.4.1 (2024-06-14) (Race for Your Life) and RStudio version 2022.12.0.353 (Elsbeth Geranium). Most of the content of this book will work fine in versions of R above 4.0 and earlier versions of RStudio, although there may be some small differences in the interface.\n:::\n\n<!-- TODO: render the book in earlier versions to find out the limits here -->\n\n### RStudio {#sec-rstudio_ide}\n\nWhen you installed R, that gave your computer the ability to process the R programming language, and also installed an app called \"R\". We will never use that app. Instead, we will use [RStudio](http://www.rstudio.com){target=\"_blank\"}.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The RStudio IDE](images/intro/rstudio.png){#fig-rstudio fig-align='center' width=100%}\n:::\n:::\n\n\nBy default, the upper left pane is the **source pane**, where you view, write, and edit code from files and view data tables in a spreadsheet format. When you first open RStudio, this pane won't display until we open a document or load in some data -- don't worry, we'll get to that soon.\n\nThe lower left pane is the **console pane**, where you can type in commands and view output messages. You can write code in the console to test it out. The code will run and can create objects in the environment, but the code itself won't be saved. You need to write your code into a script in the source pane to save it, which we'll cover in @sec-reports.\n\n\n\nIn the lower right pane, the most used tabs are the **Files** tab for directory structure, the **Plots** tab for plots made in a script, the **Packages** tab for managing add-on packages (see @sec-packages), and the **Viewer** tab to display reports created by your scripts. You can change the location of panes and what tabs are shown under <if>Tools \\> Global Options... \\> Pane Layout</if>.\n\n### Reproducibility {#sec-intro-reproducibility}\n\nIn this class, you will be learning how to make reproducible reports. This involves writing scripts that transform data, create summaries and visualisations, and embed them in a report in a way that always gives you the same results.\n\nWhen you do things reproducibly, others (and future you) can understand and check your work. You can also reuse your work more easily. For example, if you need to create a report every month with the social media analytics for your company, a reproducible report allows you to download a new month's data and create the report within seconds. It might take a little longer to set up the report in the first instance with reproducible methods, but the time it saves you in the long run is invaluable.\n\n::: callout-important\n## Settings for Reproducibility\n\n@sec-rstudio-settings shows you how to change two important settings in the Global Options to increase reproducibility. Your settings should have:\n\n-   Restore .RData into workspace at startup: <select class='webex-select'><option value='blank'></option><option value=''>Checked</option><option value='answer'>Not Checked</option></select>\n-   Save workspace to .RData on exit: <select class='webex-select'><option value='blank'></option><option value=''>Always</option><option value='answer'>Never</option><option value=''>Ask</option></select>\n:::\n\n### Themes and accessiblilty\n\nYou can customise how R Studio looks to make it work for you. Click <if>Tools \\> Global Options \\> Appearance</if>. You can change the default font, font size, and general appearance of R Studio, including using dark mode. Play around with the settings and see what you prefer - you're going to spend a lot of time with R, it might as well look nice!\n\n## Sessions {#sec-intro-sessions}\n\nIf you have the above settings configured correctly, when you open up RStudio and start writing code, loading packages, and creating objects, you will be doing so in a new session and your Environment tab should be completely empty. If you find that your code isn't working and you can't figure out why, it might be worth restarting your R session. This will clear the environment and detach all loaded packages - think of it like restarting your phone. There are several ways that you can restart R:\n\n-   Menu: <if>Session \\> Restart R</if>\n-   <mac>Cmd-Shift-F10</mac> or <pc>Ctl-Shift-F10</pc>\n-   type `.rs.restartR()` in the console\n\nTry doing each of these now. Additionally, now would be a good time to create a notebook where you can keep a record of useful hints and tips and things to try when your code isn't working. Add \"restart R session\" to this notebook as your first item.\n\n## Packages and functions {#sec-packages}\n\nWhen you install R you will have access to a range of  including options for  and statistical analysis. The functions that are included in the default installation are typically referred to as d you can think of them like the default apps that come pre-loaded on your phone.\n\nOne of the great things about R, however, is that it is **user extensible**: anyone can create a new add-on that extends its functionality. There are currently thousands of that R users have created to solve many different kinds of problems, or just simply to have fun. For example, there are packages for data visualisation, machine learning, interactive dashboards, web scraping, and playing games such as Sudoku.\n\nAdd-on packages are not distributed with base R, but have to be downloaded and installed from an archive, in the same way that you would, for instance, download and install PokemonGo on your smartphone. The main repository where packages reside is called the Comprehensive R Archive Network.\n\nThere is an important distinction between **installing** a package and **loading** a package.\n\n### Installing a package {#sec-install-package}\n\n\n```{=html}\n<!--\n<div class=\"small_right\"><img src=\"images/memes/pokemon.gif\" /></div>\n-->\n```\n\nThis is done using `install.packages()`. This is like installing an app on your phone: you only have to do it once and the app will remain installed until you remove it. For instance, if you want to use PokemonGo on your phone, you install it once from the App Store or Play Store; you don't have to re-install it each time you want to use it. Once you launch the app, it will run in the background until you close it or restart your phone. Likewise, when you install a package, the package will be available (but not *loaded*) every time you open up R.\n\nInstall the <pkg>tidyverse</pkg> package on your system. This is the main package we will use throughout this book for data wrangling, summaries, and visualisation. It is actually a bundle of packages, which we'll explain further in @sec-tidyverse.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\nIf you get a message that says something like `package ‘tidyverse’ successfully unpacked and MD5 sums checked`, the installation was successful. If you get an error and the package wasn't installed, check the troubleshooting section of @sec-package-install-troubleshooting.\n\n::: callout-caution\n## Install packages from the console only\n\nNever install a package from inside a script. Only do this from the console pane or the packages tab of the lower right pane.\n:::\n\nHere are some other packages you'll want to install for the first two chapters.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\ninstall.packages(\"beepr\") # for beeps\ninstall.packages(\"rmarkdown\") # for creating R markdown files\ninstall.packages(\"devtools\")  # for installing packages from github\n```\n:::\n\n\nOnce you've installed the <pkg>devtools</pkg> package, you can also install packages from repositories other than CRAN, such as github. The following code installs the development version of a package for making waffle plots.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\n# install waffle package \ndevtools::install_github(\"hrbrmstr/waffle\")\n```\n:::\n\n\n### Loading a package\n\nThis is done using the `library()` function. This is like **launching** an app on your phone: the functionality is only there where the app is launched and remains there until you close the app or restart. For example, when you run `library(devtools)` within a session, the functions in the package referred to by `devtools` will be made available for your R session. The next time you start R, you will need to run `library(devtools)` again if you want to access that package.\n\nAfter installing the <pkg>beepr</pkg> package, you can load it for your current R session as follows:\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\nlibrary(beepr)\n```\n:::\n\n\nYou might get some red text when you load a package, this is normal. It is usually warning you that this package has functions that have the same name as other packages you've already loaded.\n\n::: callout-note\nYou can use the convention `package::function()` to indicate in which add-on package a function resides. For instance, if you see `readr::read_csv()`, that refers to the function `read_csv()` in the {readr} add-on package. If the package is loaded using `library()`, you don't have to specify the package name before a function unless there is a (e.g., you have two packages loaded that have a function with the same name).\n:::\n\n### Using a function\n\nNow you can run the function `beep()`.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\nbeep()\n```\n:::\n\n\nA a name that refers to some code you can reuse. We'll start by using functions that are provided for you in packages, but you can also write your own functions. After the function name, there is a pair of parentheses, which contain zero or more ` These are options that you can set. In the example above, the `sound` argument has af `1`, which makes a \"ping\" sound. Try changing the argument to an integer between 1 and 11.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\nbeep(sound = 8)\n```\n:::\n\n\n\n\n### Tidyverse {#sec-tidyverse}\n\n<pkg>tidyverse</pkg> is a meta-package that loads several packages we'll be using in almost every chapter in this book:\n\n-   <pkg>ggplot2</pkg>, for data visualisation (@sec-viz)\n-   <pkg>readr</pkg>, for data import (@sec-data)\n-   <pkg>tibble</pkg>, for tables (@sec-data)\n-   <pkg>tidyr</pkg>, for data tidying (@sec-tidy)\n-   <pkg>dplyr</pkg>, for data manipulation (@sec-wrangle)\n- \n-   <pkg>purrr</pkg>, for repeating things\n\nWhen you install <pkg>tidyverse</pkg>, it also installs some other useful packages that you can load individually. You can get the full list using `tidyverse_packages()`, but the packages we'll be using in this book are:\n\n-   <pkg>googlesheets4</pkg>, for working with Google spreadsheets\n-   <pkg>readxl</pkg>, for Excel files\n-   <pkg>lubridate</pkg>, for working with dates\n-   <pkg>hms</pkg>, for working with times\n-   <pkg>rvest</pkg>, for web scraping\n\n### Function Help {#sec-function-help}\n\nWhen you load the <pkg>tidyverse</pkg> it automatically loads all of the above packages, however, it can be helpful to know which package a function comes from if you need to Google it. If a\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\n# if the package is loaded\n?beepr\nhelp(\"beepr\")\n\n# works whether or not the package is loaded\n?beepr::beep\nhelp(\"beep\", package=\"beepr\") \n\n# shows a list of potentially matching functions\n??beep\n```\n:::\n\n\n::: {.small_right style=\"width: 50%; max-width: 400px;\"}\n<img src=\"images/intro/function_help.png\"/>\n:::\n\n::: {.callout-note .try style=\"clear: both;\"}\n## Function Help\n\n-   What is the first argument to the `mean` function? <select class='webex-select'><option value='blank'></option><option value=''>trim</option><option value=''>na.rm</option><option value=''>mean</option><option value='answer'>x</option></select>\n-   What package is `read_excel` in? <select class='webex-select'><option value='blank'></option><option value=''>readr</option><option value='answer'>readxl</option><option value=''>base</option><option value=''>stats</option></select>\n:::\n\n### Arguments\n\nYou can look up the arguments/options that a function has by using the help documentation. Some arguments are required, and some are optional. Optional arguments will often use a default (normally specified in the help documentation) if you do not enter any value.\n\nAs an example, look at the help documentation for the function `sample()` which randomly samples items from a list.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\n?sample\n```\n:::\n\n\nThe help documentation for `sample()` should appear in the bottom right help panel. In the usage section, we see that `sample()` takes the following form:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsample(x, size, replace = FALSE, prob = NULL)\n```\n:::\n\n\nIn the arguments section, there are explanations for each of the arguments. `x` is the list of items we want to choose from, `size` is the number of items we want to choose, `replace` is whether or not each item may be selected more than once, and `prob` gives the probability that each item is chosen. In the details section it notes that if no values are entered for `replace` or `prob` it will use defaults of `FALSE` (each item can only be chosen once) and `NULL` (all items will have equal probability of being chosen). Because there is no default value for `x` or `size`, they must be specified otherwise the code won't run.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsample(x = letters, size = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"z\" \"v\" \"y\" \"w\" \"j\"\n```\n\n\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Why are my letters different to your letters?\n\n`sample()` generates a random sample. Each time you run the code, you'll generate a different set of random letters (try it). The function `set.seed()` controls the random number generator - if you're using any functions that use randomness (such as `sample()`), running `set.seed()` will ensure that you get the same result (in many cases this may not be what you want to do). To get the same numbers we do, run `set.seed(1242016)` in the console, and then run `sample(x = letters, size = 5)` again.\n:::\n\nNow we can change the default value for the `replace` argument to produce a set of letters that is allowed to have duplicates.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(8675309)\nsample(x = letters, size = 5, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"t\" \"k\" \"j\" \"k\" \"m\"\n```\n\n\n:::\n:::\n\n\nThis time R has still produced 5 random letters, but now this set of letters has two instances of \"k\". Always remember to use the help documentation to help you understand what arguments a function requires.\n\n### Argument names\n\nIn the above examples, we have written out the argument names in our code (i.e., `x`, `size`, `replace`), however, this is not strictly necessary. The following two lines of code would both produce the same result (although each time you run `sample()` it will produce a slightly different result, because it's random, but they would still work the same):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsample(x = letters, size = 5, replace = TRUE)\nsample(letters, 5, TRUE)\n```\n:::\n\n\nImportantly, if you do not write out the argument names, R will use the default order of arguments. That is, for `sample` it will assume that the first value you enter is `x`, the second value is `size` and the third value is `replace`.\n\nIf you write out the argument names, then you can write the arguments in whatever order you like:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsample(size = 5, replace = TRUE, x = letters)\n```\n:::\n\n\nWhen you are first learning R, you may find it useful to write out the argument names as it can help you remember and understand what each part of the function is doing. However, as your skills progress you may find it quicker to omit the argument names and you will also see code examples online that do not use argument names, so it is important to be able to understand which argument each bit of code is referring to (or look up the help documentation to check).\n\nIn this course, we will always write out the argument names the first time we use each function. However, in subsequent uses they may be omitted.\n\n### Tab auto-complete\n\nOne very useful feature of R Studio is tab auto-complete for functions. If you write the name of the function and then press the tab key, R Studio will show you the arguments that function takes along with a brief description. If you press enter on the argument name it will fill in the name for you, just like auto-complete on your phone. This is incredibly useful when you are first learning R and you should remember to use this feature frequently.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Tab auto-complete](images/intro/autocomplete.png){#fig-autocomplete fig-align='center' width=100%}\n:::\n:::\n\n\n## Objects {#sec-objects}\n\nA large part of your coding will involve creating and manipulating objects. Objects contain stuff. That stuff can be numbers, words, or the result of operations and analyses. You assign content to an object using `<-`.\n\nRun the following code in the console, but change the values of `name` and `age` to your own details and change `christmas` to a holiday or date you care about.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\nname <- \"Emily\"\nage <- 36\ntoday <- Sys.Date()\nchristmas <- as.Date(\"2024-12-25\")\n```\n:::\n\n\nYou'll see that four objects now appear in the environment pane:\n\n::: {.callout-note .try}\nTo print the contents of an object, type the object's name in the console and press enter. Try printing all four objects now.\n:::\n\nFinally, a key concept to understand is that objects can interact and you can save the results of those interactions in new object. Edit and run the following code to create these new objects, and then print the contents of each new object.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\ndecade <- age + 10\nfull_name <- paste(name, \"Nordmann\")\nhow_long <- christmas - today\n```\n:::\n\n\n## Getting help {#sec-help}\n\n\n### Package reference manuals\n\nStart up help in a browser by entering `help.start()` in the console. Click on <if>Packages</if> under <if>Reference</if> to see a list of packages. Scroll down to the <pkg>readxl</pkg> package and click on it to see a list of the functions that are available in that package.\n\n### Googling\n\nIf the function help doesn't help, or you're not even sure what function you need, try Googling your question. It will take some practice to be able to use the right jargon in your search terms to get what you want. It helps to put \"R\" or \"tidyverse\" in the search text, or the name of the relevant package, like \"ggplot2\".\n\n### AI\n\nGenerative AI platforms have exploded in popularity, particularly when it comes to coding. Because of this, we have created a companion book [AITutoR](https://psyteachr.github.io/AITutoR/) to show you how to use AI responsibly to support your coding journey.\n\n### Vignettes\n\nMany packages, especially [tidyverse](https://www.tidyverse.org/packages/){target=\"_blank\"} ones, have helpful websites with vignettes explaining how to use their functions. Some of the vignettes are also available inside R. You can access them from a package's help page or with the `vignette()` function.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\n# opens a list of available vignettes\nvignette(package = \"ggplot2\")\n\n# opens a specific vignette in the Help pane\nvignette(\"ggplot2-specs\", package = \"ggplot2\")\n```\n:::\n\n\n\n## Further Resources {#sec-resources-intro}\n\n-   [RStudio IDE Cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/rstudio-ide.pdf){target=\"_blank\"}\n-   [RStudio Cloud](https://rstudio.cloud/){target=\"_blank\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}