# Daten Import und Export in R

In diesem Kapitel beschäftigen wir uns mit grundlegenden Techniken, um Daten in R zu importieren und zu exportieren. Diese Fähigkeiten sind essentiell, da Datenanalyse ohne Daten nicht möglich ist. Die im Folgenden vorgestellten Methoden werden sehen, wie man effizient mit verschiedenen Datenquellen arbeiten kann. 

## Daten importieren

Zum Importieren von Daten in R gibt es verschiedene Methoden, die je nach Quelle und Dateityp variieren können. Wir werden drei häufige Ansätze betrachten:

### Import durch Klicken
In RStudio können Sie Daten einfach durch Klicken importieren, via `Datei -> Import Dataset -> From Text (readr)`. Dies ist besonders nützlich für Anfänger oder wenn Sie schnell eine Datei ohne vorherige Skripterstellung laden möchten.

**Beachten Sie:**
- Durch diese Methode wird der entsprechende Code in der Konsole angezeigt. Dies ist hilfreich, um den genutzten Befehl zu lernen und bei Bedarf anzupassen.

### Import durch Pfadangabe
Die oben genannt Methode hat einen erheblichen Nachteil: sie ist durch andere nicht reporduzierbar. Wie schon gesagt ist ein grosser Vorteil von R, dass die Analysen durch das Ausführen gesamter Skripte reproduzierbar sind. Erfordert ein Skript menschlichen Input (Auswahl der Datei via Menü) ist es nicht mehr 100% reproduzierbar. Deshalb verwenden wir diese Mehtode nur zu Beginn. Besser ist es, die Daten via Pfadangabe einzulesen. Anstatt die Datei manuell auszuwählen, spezifizieren wir dabei den Pfad der Datei (also der Ort auf dem Computer, wo sich die Datei befindet).

Und nun zahlt es sich aus, dass wir im ersten Kapitel ein Projekt und eine Ordnerstruktur erstellt haben. Dies vereinfacht nämlich die Arbeit mit externen Daten und deren Pfaden enorm. Der Grund dafür ist, dass R nun bei der Angabe von Pfaden bereits im Projektordner "sucht". Dies können wir verifizieren, indem wir uns das Arbeitsverzeichnis (working directory) von R anzeigen lassen: 


```{r}
library(tidyverse)
```


```{r}
getwd()
```

Das heisst, dass wir nicht den ganzen Pfad zu einer Datei, also zum Beispiel `"/Users/dominik/Dropbox/Uni/Psychologie/PhD/Teaching/Data Analysis Introduction/book/data/test_data.csv"` angeben müssen, sondern nur den letzten Teil, `data/test_data.csv`.

Wenn sich die Datei `test_data.csv` also innerhlab ihres Projektordners in einem Ordner Namens `data` befinden würde, könnten sie die Datei folgendermassen einlesen:

```{r, eval = FALSE}
library(tidyverse)

df_0 <- read_csv('data/test_data.csv')
```


Daten werden häufig im sogenannten `csv` Format abgespeichert, dies steht für "comma-separated values". CSV Dateien sind Textdateien, bei denen Spalten durch Kommas getrennt werden. 



### Import über URL
Der Import über eine URL ist effizient, wenn Daten regelmäßig aktualisiert werden oder sehr groß sind. Beispiel:
```{r, eval = FALSE}
df <- read_csv("https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv")
```

```{r, echo=FALSE}
df <- mtcars
```


## Daten prüfen
Nach dem Import ist es wichtig, die Daten zu prüfen, um ein Verständnis für die Struktur und mögliche Probleme zu entwickeln:
- `glimpse(df)` zeigt die Struktur der Daten, wir sehen alle Spalten und die Klasse der Variablen (in diesem Fall alles `double`)
```{r}
glimpse(df)
```

- `head(df)` zeigt die ersten Zeilen.
```{r}
head(df)
```

- `summary(df)` liefert eine Zusammenfassung der Daten.
```{r}
summary(df)
```


## Daten exportieren
Nach einer Analyse möchten wir Daten oft exporiteren. Dies erfolgt ähnlich wie das Importieren. 


### Export als CSV
```{r, eval = FALSE}
write_csv(df, 'pfad/zum/speichern/my_data.csv')
```

### Export als XLSX
Nach Installation von `writexl`:
```{r, eval = FALSE}
#install.packages("writexl")
library(writexl)
write_xlsx(df, 'pfad/zum/speichern/my_data.xlsx')
```

### Export als RData
Für R-spezifische Datenformate:
```{r, eval = FALSE}
save(df, file = 'pfad/zum/speichern/my_data.RData')
```


## Aufgaben
1. Besuchen Sie die Webseite [Gabor's Data Analysis](https://gabors-data-analysis.com/) und finden Sie die OSF-Datenbank.
2. Laden Sie die `hotelbookingdata.csv` von der OSF-Datenbank manuell herunter und importieren Sie sie in R.
3. Exportieren Sie die Daten als XLSX und RData.

Durch das Erlernen dieser Techniken wird Ihr Arbeitsfluss in R effizienter und Ihre Analysen reproduzierbar, was die Grundlage für empirische Forschung bildet.




